{
  "info": {
    "version": "2.0.0",
    "description": "",
    "title": "Deribit API"
  },
  "paths": {
    "/private/logout": {
      "get": {
        "summary": "Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled",
        "responses": {
          "200": {
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "tags": [
          "websocket_only",
          "authentication",
          "private"
        ]
      }
    },
    "/public/get_last_trades_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_start_seq"
          },
          {
            "$ref": "#/components/parameters/optional_end_seq"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/set_email_language": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Changes the language to be used for emails.",
        "parameters": [
          {
            "required": true,
            "in": "query",
            "description": "The abbreviated language name. Valid values include `\"en\"`, `\"ko\"`, `\"zh\"`",
            "name": "language",
            "schema": {
              "type": "string",
              "example": "en"
            }
          }
        ],
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/orderstate": {
      "get": {
        "summary": "Retrieve order details state by order id. \nThis API endpoint requires your request to be signed.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_orderstate_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Required, the ID of the order to be retrieved",
            "name": "orderId",
            "schema": {
              "type": "number",
              "example": 100
            }
          }
        ],
        "tags": [
          "trading",
          "private",
          "v1"
        ]
      }
    },
    "/private/get_open_orders_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_open_orders_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves list of user's open orders.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_order_type"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/cancel_all_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Cancels all orders by currency, optionally filtered by instrument kind and/or order type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/disable_heartbeat": {
      "get": {
        "summary": "Stop sending heartbeat messages.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "tags": [
          "websocket_only",
          "session_management",
          "public"
        ]
      }
    },
    "/private/subscribe": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_subscribe_response"
                }
              }
            },
            "description": "foo"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "name": "channels",
            "schema": {
              "items": {
                "type": "string",
                "example": "deribit_price_index.btc_usd",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          }
        ],
        "tags": [
          "private",
          "websocket_only",
          "subscription_management"
        ],
        "description": "Subscribe to one or more channels.\n\nThe name of the channel determines what information will be provided, and\nin what form.\n",
        "summary": "Subscribe to one or more channels."
      }
    },
    "/private/cancel_all_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Cancels all orders by instrument, optionally filtered by order type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_simple_order_type"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/get_historical_volatility": {
      "get": {
        "summary": "Provides information about historical volatility for given cryptocurrency.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_historical_volatility_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/private/close_position": {
      "get": {
        "summary": "Makes closing position reduce only order .",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_buy_and_sell_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/simple_order_type_market_limit"
          },
          {
            "$ref": "#/components/parameters/optional_price"
          }
        ],
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/public/unsubscribe": {
      "get": {
        "summary": "Unsubscribe from one or more channels.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_subscribe_response"
                }
              }
            },
            "description": "foo"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "A list of channels to unsubscribe from.",
            "in": "query",
            "name": "channels",
            "schema": {
              "items": {
                "type": "string",
                "example": "deribit_price_index.btc_usd"
              },
              "type": "array"
            }
          }
        ],
        "tags": [
          "websocket_only",
          "subscription_management"
        ]
      }
    },
    "/private/submit_transfer_to_user": {
      "get": {
        "summary": "Transfer funds to a another user.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_submit_transfer_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_currency_amount"
          },
          {
            "$ref": "#/components/parameters/transfer_destination_for_user"
          },
          {
            "$ref": "#/components/parameters/tfa"
          }
        ],
        "tags": [
          "private",
          "wallet",
          "internal"
        ]
      }
    },
    "/private/get_user_trades_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest user trades that have occurred for a specific instrument.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_start_seq"
          },
          {
            "$ref": "#/components/parameters/optional_end_seq"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_current_deposit_address": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_deposit_address_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve deposit address for currency",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/remove_from_address_book": {
      "get": {
        "summary": "Adds new entry to address book of given type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_remove_from_address_book_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          },
          {
            "$ref": "#/components/parameters/tfa"
          }
        ],
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/public/get_last_trades_by_instrument_and_time": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest trades that have occurred for a specific instrument and within given time range.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_currencies": {
      "get": {
        "summary": "Retrieves all cryptocurrencies supported by the API.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_currencies_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/private/edit": {
      "x-order": 300,
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_edit_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Change price, amount and/or other properties of an order.",
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/edit_order_price"
          },
          {
            "$ref": "#/components/parameters/post_only"
          },
          {
            "$ref": "#/components/parameters/edit_advanced_order_type"
          },
          {
            "$ref": "#/components/parameters/stop_price"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/datatable": {
      "get": {
        "summary": "This is a private API endpoint intended for the user interface. This API is subject to change, and should not be used outside the Deribit interface.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [],
        "tags": [
          "internal",
          "private",
          "v1",
          "websocket_only"
        ]
      }
    },
    "/public/get_order_book": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_order_book_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves the order book, along with other market values for a given instrument.",
        "parameters": [
          {
            "required": true,
            "in": "query",
            "description": "The instrument name for which to retrieve the order book, see [`getinstruments`](#getinstruments) to obtain instrument names.",
            "name": "instrument_name",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The number of entries to return for bids and asks.",
            "name": "depth",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/create_subaccount": {
      "get": {
        "summary": "Create a new subaccount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_create_subaccount_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/public/get_book_summary_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_book_summary_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/cancel": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_cancel_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Cancel an order, specified by order id",
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/get_funding_chart_data": {
      "get": {
        "summary": "Retrieve the latest user trades that have occurred for PERPETUAL instruments in a specific currency symbol and within given time range.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_funding_chart_data_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/length_for_perpetual_chart"
          }
        ],
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/get_option_mark_prices": {
      "get": {
        "summary": "Retrives market prices and its implied volatility of options instruments",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_option_mark_prices_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "internal"
        ]
      }
    },
    "/private/get_order_history_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_order_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves history of orders that have been partially or fully filled.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_orders"
          },
          {
            "$ref": "#/components/parameters/optional_include_unfilled_orders"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/sell": {
      "x-order": 200,
      "get": {
        "summary": "Places a sell order for an instrument.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_buy_and_sell_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_type"
          },
          {
            "$ref": "#/components/parameters/order_label"
          },
          {
            "$ref": "#/components/parameters/order_price"
          },
          {
            "$ref": "#/components/parameters/time_in_force"
          },
          {
            "$ref": "#/components/parameters/max_show"
          },
          {
            "$ref": "#/components/parameters/post_only"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/stop_price"
          },
          {
            "$ref": "#/components/parameters/trigger"
          },
          {
            "$ref": "#/components/parameters/advanced_order_type"
          }
        ],
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/get_margins": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_margins_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Get margins for given instrument, amount and price.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "required": true,
            "in": "query",
            "description": "Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "name": "amount",
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "required": true,
            "in": "query",
            "description": "Price",
            "name": "price",
            "schema": {
              "example": 7000.5,
              "type": "number"
            }
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/subscribe": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_subscribe_response"
                }
              }
            },
            "description": "foo"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "name": "channels",
            "schema": {
              "items": {
                "type": "string",
                "example": "deribit_price_index.btc_usd",
                "x-deribit-type": "channel"
              },
              "type": "array"
            }
          }
        ],
        "tags": [
          "public",
          "subscription_management",
          "websocket_only"
        ],
        "description": "Subscribe to one or more channels.\n\nThis is the same method as [/private/subscribe](#private_subscribe), but it can only\nbe used for 'public' channels.\n",
        "summary": "Subscribe to one or more channels."
      }
    },
    "/private/set_password_for_subaccount": {
      "get": {
        "summary": "Set the password for the subaccount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "required": true,
            "description": "The password for the subaccount",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/public/get_last_trades_by_currency_and_time": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within given time range.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/change_subaccount_name": {
      "get": {
        "summary": "Change the user name for a subaccount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "required": true,
            "description": "The new user name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "example": "newUserName"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/cancel_withdrawal": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_withdraw_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Cancels withdrawal request",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/withdrawal_id"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/public/hello": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_test_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.",
        "parameters": [
          {
            "$ref": "#/components/parameters/client_software_name"
          },
          {
            "$ref": "#/components/parameters/client_software_version"
          }
        ],
        "tags": [
          "public",
          "supporting",
          "websocket_only"
        ]
      }
    },
    "/public/get_contract_size": {
      "get": {
        "summary": "Retrieves contract size of provided instrument.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_contract_size_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/public/getlasttrades": {
      "get": {
        "summary": "Retrieve the latest trades that have occurred for a specific instrument. Trades are identified in two ways:\n\n* the trade is (`tradeId`), which is unique between all instruments, but is not guaranteed to be strictly sequential.\n* the trade sequence (`tradeSeq`), which starts at 1 for each instruments, and is strictly sequential. Under rare circumstances, it is possible for the trade sequence to skip a few numbers.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_getlasttrades_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "`\"asc\"` for ascending, `\"desc\"` for descending",
            "name": "sort",
            "schema": {
              "type": "string",
              "example": "desc"
            }
          },
          {
            "required": true,
            "in": "query",
            "description": "Either the name of the instrument, or `\"all\"` for all active instruments, `\"futures\"` for all active futures, or `\"options\"` for all active options.",
            "name": "instrument",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The number of trades returned (clamped to max 10000)",
            "name": "count",
            "schema": {
              "type": "number",
              "example": 100
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The ID of the first trade to be returned",
            "name": "startId",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The ID of the last trade to be returned",
            "name": "endId",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The trade sequence of the first trade to be returned",
            "name": "startSeq",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The trade sequence of the last trade to be returned",
            "name": "endSeq",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The timestamp (in ms) of the first trade to be returned",
            "name": "startTimestamp",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The timestamp (in ms) of the last trade to be returned",
            "name": "endTimestamp",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "DEPRECATED, The ID after which trades are returned, for backward compatibility",
            "name": "since",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "DEPRECATED, alias to \"sort\", for backward compatibility",
            "name": "direction",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "market_data",
          "public",
          "v1"
        ]
      }
    },
    "/public/getorderbook": {
      "get": {
        "summary": "Retrieves the order book, along with other market values for a given instrument.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_getorderbook_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "in": "query",
            "description": "The instrument name for which to retrieve the order book.",
            "name": "instrument",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The number of entries to return for bids and asks.",
            "name": "depth",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "market_data",
          "public",
          "v1"
        ]
      }
    },
    "/private/get_order_history_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_order_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves history of orders that have been partially or fully filled.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_orders"
          },
          {
            "$ref": "#/components/parameters/optional_include_unfilled_orders"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/cancel_transfer_by_id": {
      "get": {
        "summary": "Cancel transfer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_submit_transfer_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_id"
          },
          {
            "$ref": "#/components/parameters/tfa"
          }
        ],
        "tags": [
          "private",
          "wallet"
        ]
      }
    },
    "/private/enable_cancel_on_disconnect": {
      "x-order": 100,
      "get": {
        "summary": "Enable Cancel On Disconnect for the connection. This does not change the default account setting.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "tags": [
          "websocket_only",
          "session_management",
          "private"
        ]
      }
    },
    "/private/orderhistory": {
      "get": {
        "summary": "Retrieves history of orders that have been partially or fully filled. \nThis API endpoint requires your request to be signed.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_orderhistory_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "the number of items to be returned.",
            "name": "count",
            "schema": {
              "type": "number",
              "example": 100
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Either the name of an instrument, \"future\" of \"option\"",
            "name": "instrument",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The offset for pagination",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "tags": [
          "trading",
          "private",
          "v1"
        ]
      }
    },
    "/private/get_user_trades_by_order": {
      "get": {
        "summary": "Retrieve the list of user trades that was created for given order",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_trades_by_order_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/ping": {
      "get": {
        "summary": "This API endpoint always responds with \"pong\". This method is primarily intended to be used as a keep alive message over websocket. When used over HTTP this API endpoint could also be used to measure network delays between your software and the API server.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [],
        "tags": [
          "session_management",
          "public",
          "v1"
        ]
      }
    },
    "/private/get_order_margin_by_ids": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_order_margin_by_ids_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves initial margins of given orders",
        "parameters": [
          {
            "description": "Ids of orders",
            "required": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "type": "string",
                "example": "123456"
              },
              "type": "array"
            }
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/buy": {
      "x-order": 100,
      "get": {
        "summary": "Places a buy order for an instrument.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_buy_and_sell_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/order_quantity"
          },
          {
            "$ref": "#/components/parameters/order_type"
          },
          {
            "$ref": "#/components/parameters/order_label"
          },
          {
            "$ref": "#/components/parameters/order_price"
          },
          {
            "$ref": "#/components/parameters/time_in_force"
          },
          {
            "$ref": "#/components/parameters/max_show"
          },
          {
            "$ref": "#/components/parameters/post_only"
          },
          {
            "$ref": "#/components/parameters/reduce_only"
          },
          {
            "$ref": "#/components/parameters/stop_price"
          },
          {
            "$ref": "#/components/parameters/trigger"
          },
          {
            "$ref": "#/components/parameters/advanced_order_type"
          }
        ],
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/get_positions": {
      "get": {
        "summary": "Retrieve user positions.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_positions_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "When some error occurs"
          }
        },
        "parameters": [
          {
            "required": true,
            "in": "query",
            "name": "currency",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "description": "Kind filter on positions",
            "in": "query",
            "name": "kind",
            "schema": {
              "$ref": "#/components/schemas/kind"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_address_book": {
      "get": {
        "summary": "Retrieves address book of given type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_address_book_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          }
        ],
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/private/toggle_subaccount_login": {
      "get": {
        "summary": "Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "required": true,
            "description": "enable or disable login.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "enable",
                "disable"
              ],
              "type": "string"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/public/test": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_test_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.",
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "The value \"exception\" will trigger an error response. This may be useful for testing wrapper libraries.",
            "name": "expected_result",
            "schema": {
              "enum": [
                "exception"
              ],
              "type": "string"
            }
          }
        ],
        "tags": [
          "public",
          "supporting"
        ]
      }
    },
    "/private/unsubscribe": {
      "get": {
        "summary": "Unsubscribe from one or more channels.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_subscribe_response"
                }
              }
            },
            "description": "foo"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "A list of channels to unsubscribe from.",
            "in": "query",
            "name": "channels",
            "schema": {
              "items": {
                "type": "string",
                "example": "deribit_price_index.btc_usd"
              },
              "type": "array"
            }
          }
        ],
        "tags": [
          "private",
          "websocket_only",
          "subscription_management"
        ]
      }
    },
    "/public/get_last_trades_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest trades that have occurred for a specific instrument.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_start_seq"
          },
          {
            "$ref": "#/components/parameters/optional_end_seq"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/tradehistory": {
      "get": {
        "summary": "Retrieve the trade history of the account. This API endpoint requires your request to be signed.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_tradehistory_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "`\"asc\"` for ascending, `\"desc\"` for descending",
            "name": "sort",
            "schema": {
              "type": "string",
              "example": "desc"
            }
          },
          {
            "required": true,
            "in": "query",
            "description": "Either the name of the instrument, or `\"all\"` for instruments, `\"futures\"` for all futures, or `\"options\"` for all options.",
            "name": "instrument",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The number of trades returned (clamped to max 10000)",
            "name": "count",
            "schema": {
              "type": "number",
              "example": 100
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The ID of the first trade to be returned",
            "name": "startId",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The ID of the last trade to be returned",
            "name": "endId",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The trade sequence of the first trade to be returned",
            "name": "startSeq",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The trade sequence of the last trade to be returned",
            "name": "endSeq",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The timestamp (in ms) of the first trade to be returned",
            "name": "startTimestamp",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "The timestamp (in ms) of the last trade to be returned",
            "name": "endTimestamp",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "DEPRECATED, The ID after which trades are returned, for backward compatibility",
            "name": "since",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "DEPRECATED, alias to \"sort\", for backward compatibility",
            "name": "direction",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "trading",
          "private",
          "v1"
        ]
      }
    },
    "/private/disable_cancel_on_disconnect": {
      "get": {
        "summary": "Disable Cancel On Disconnect for the connection. This does not change the default account setting.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "tags": [
          "websocket_only",
          "session_management",
          "private"
        ]
      }
    },
    "/private/positions": {
      "get": {
        "summary": "Retrieves current positions.\nThis API endpoint requires your request to be signed.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_positions_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Base currency to return positions for (`BTC`, `ETH` or all)",
            "name": "currency",
            "schema": {
              "type": "string",
              "example": "all"
            }
          }
        ],
        "tags": [
          "trading",
          "private",
          "v1"
        ]
      }
    },
    "/private/get_position": {
      "get": {
        "summary": "Retrieve user position.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_position_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "When some error occurs"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_new_announcements": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_announcements_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves announcements that have not been marked read by the user.",
        "parameters": [],
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/disable_tfa_for_subaccount": {
      "get": {
        "summary": "Disable two factor authentication for a subaccount.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/get_user_trades_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/optional_start_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_end_trade_id"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_transfers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_transfers_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Adds new entry to address book of given type",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_open_orders_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_open_orders_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves list of user's open orders within given Instrument.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_order_type"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_order_state": {
      "get": {
        "summary": "Retrieve the current state of an order.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_order_state_response"
                }
              }
            },
            "description": "foo"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "result when used via rest/HTTP"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "tags": [
          "private",
          "trading"
        ]
      }
    },
    "/private/withdraw": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_withdraw_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Creates a new withdrawal request",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          },
          {
            "$ref": "#/components/parameters/withdrawal_currency_amount"
          },
          {
            "$ref": "#/components/parameters/withdrawal_priority"
          },
          {
            "$ref": "#/components/parameters/tfa"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/get_settlement_history_by_instrument": {
      "x-order": 10100,
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_settlement_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves public settlement, delivery and bankruptcy events filtered by instrument name",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/get_deposits": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_deposits_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest users deposits",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/public/get_footer": {
      "get": {
        "summary": "Get information to be displayed in the footer of the website.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_footer_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "tags": [
          "internal"
        ]
      }
    },
    "/private/get_user_trades_by_currency_and_time": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within given time range.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/get_book_summary_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_book_summary_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/get_last_settlements_by_currency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settlement_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within given currency.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/get_user_trades_by_instrument_and_time": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_trades_history_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest user trades that have occurred for a specific instrument and within given time range.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/start_timestamp"
          },
          {
            "$ref": "#/components/parameters/end_timestamp"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_include_old_trades"
          },
          {
            "$ref": "#/components/parameters/optional_sorting"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/private/set_announcement_as_read": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Marks an announcement as read, so it will not be shown in `get_new_announcements`.",
        "parameters": [
          {
            "required": true,
            "in": "query",
            "description": "the ID of the announcement",
            "name": "announcement_id",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/private/get_settlement_history_by_currency": {
      "x-order": 10200,
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_settlement_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves settlement, delivery and bankruptcy events that have affected your account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          }
        ],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/set_heartbeat": {
      "x-order": 100,
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections.\nWhen heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.",
        "parameters": [
          {
            "required": true,
            "in": "query",
            "description": "The heartbeat interval in seconds, but not less than 10",
            "name": "interval",
            "schema": {
              "type": "number",
              "example": 60
            }
          }
        ],
        "tags": [
          "public",
          "session_management",
          "websocket_only"
        ]
      }
    },
    "/private/get_subaccounts": {
      "get": {
        "summary": "Get information about subaccounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_subaccounts_response"
                }
              }
            },
            "description": "foo"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "not authorised"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "with_portfolio",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/private/submit_transfer_to_subaccount": {
      "get": {
        "summary": "Transfer funds to a subaccount.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_submit_transfer_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/transfer_currency_amount"
          },
          {
            "$ref": "#/components/parameters/transfer_destination_for_subaccount"
          }
        ],
        "tags": [
          "private",
          "wallet",
          "internal"
        ]
      }
    },
    "/private/get_withdrawals": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_withdrawals_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieve the latest users withdrawals",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_count10"
          },
          {
            "$ref": "#/components/parameters/optional_offset"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/private/add_to_address_book": {
      "get": {
        "summary": "Adds new entry to address book of given type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_add_to_address_book_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/address_book_type"
          },
          {
            "$ref": "#/components/parameters/currency_address_from_address_book"
          },
          {
            "$ref": "#/components/parameters/address_name"
          },
          {
            "$ref": "#/components/parameters/tfa"
          }
        ],
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/public/get_index": {
      "get": {
        "summary": "Retrieves the current index price for the instruments, for the selected currency.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_index_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/public/ticker": {
      "get": {
        "tags": [
          "public",
          "market_data"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_ticker_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "summary": "Get ticker for an instrument."
      }
    },
    "/private/get_account_summary": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_account_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves user account summary.",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "required": false,
            "in": "query",
            "description": "Include additional fields",
            "name": "extended",
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "tags": [
          "account_management",
          "private"
        ]
      }
    },
    "/public/validate_field": {
      "get": {
        "summary": "Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "description": "Name of the field to be validated, examples: postal_code, date_of_birth",
            "required": true,
            "in": "query",
            "name": "field",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Value to be checked",
            "required": true,
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Additional value to be compared with",
            "required": false,
            "in": "query",
            "name": "value2",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "public",
          "internal"
        ]
      }
    },
    "/private/toggle_deposit_address_creation": {
      "get": {
        "summary": "Enable or disable deposit address creation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/boolean_state"
          }
        ],
        "tags": [
          "wallet",
          "private",
          "internal"
        ]
      }
    },
    "/public/get_instruments": {
      "get": {
        "summary": "Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have existed historically.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_instruments_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/optional_kind"
          },
          {
            "description": "Set to true to show expired instruments instead of active ones.",
            "in": "query",
            "name": "expired",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "public",
          "market_data"
        ]
      }
    },
    "/private/cancel_all": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "This method cancels all users orders and stop orders within all currencies and instrument kinds.",
        "parameters": [],
        "tags": [
          "trading",
          "private"
        ]
      }
    },
    "/public/get_time": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_time_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.",
        "parameters": [],
        "tags": [
          "supporting",
          "public"
        ]
      }
    },
    "/private/getopenorders": {
      "get": {
        "summary": "Retrieves open orders.\nThis API endpoint requires your request to be signed.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_getopenorders_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "description": "Instrument to return open orders for",
            "name": "instrument",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "order ID",
            "name": "orderId",
            "schema": {
              "type": "number"
            }
          },
          {
            "required": false,
            "in": "query",
            "description": "Order types to return. Valid values include `\"limit\"`, `\"stop_limit\"`",
            "name": "type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "trading",
          "private",
          "v1"
        ]
      }
    },
    "/public/get_announcements": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_announcements_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves announcements from the last 30 days.",
        "parameters": [],
        "tags": [
          "account_management",
          "public"
        ]
      }
    },
    "/private/toggle_notifications_from_subaccount": {
      "get": {
        "summary": "Enable or disable sending of notifications for the subaccount.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "required": true,
            "description": "enable (`true`) or disable (`false`) notifications",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/public/get_last_settlements_by_instrument": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settlement_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_type"
          },
          {
            "$ref": "#/components/parameters/optional_count20"
          },
          {
            "$ref": "#/components/parameters/continuation"
          },
          {
            "$ref": "#/components/parameters/optional_settlement_start_timestamp"
          }
        ],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/set_email_for_subaccount": {
      "get": {
        "summary": "Assign an email address to a subaccount. User will receive an email with confirmation link.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "The user id for the subaccount",
            "in": "query",
            "name": "sid",
            "schema": {
              "type": "integer"
            }
          },
          {
            "required": true,
            "description": "The email address for the subaccount",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "example": "subaccount_1@email.com"
            }
          }
        ],
        "tags": [
          "private",
          "account_management"
        ]
      }
    },
    "/public/auth": {
      "get": {
        "responses": {
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_message"
                }
              }
            },
            "description": "over limit"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_auth_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "Method of authentication",
            "in": "query",
            "name": "grant_type",
            "schema": {
              "enum": [
                "password",
                "client_credentials",
                "client_signature",
                "refresh_token"
              ],
              "type": "string"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `password`",
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string",
              "example": "your_email@mail.com"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `password`",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string",
              "example": "your_password"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `client_credentials` and `client_signature`",
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `client_credentials`",
            "in": "query",
            "name": "client_secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `refresh_token`",
            "in": "query",
            "name": "refresh_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `client_signature`, provides time when request has been generated",
            "in": "query",
            "name": "timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "description": "Required for grant type `client_signature`; it's a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with `SHA256` hash algorithm",
            "in": "query",
            "name": "signature",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional for grant type `client_signature`; delivers user generated initialization vector for the server token",
            "in": "query",
            "name": "nonce",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Will be passed back in the response",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Describes type of the access for assigned token, possible values: `connection`, `session`, `session:name`, `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`",
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string",
              "example": "connection"
            }
          }
        ],
        "tags": [
          "public",
          "authentication"
        ],
        "description": "Retrieve an Oauth access token, to be used for authentication of 'private' requests.\n\nThree methods of authentication are supported:\n\n- <code>password</code> - using email and and password as when logging on to the website\n- <code>client_credentials</code> - using the access key and access secret that can be found on the API page on the website\n- <code>client_signature</code> - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-deribit-signature-credentials)\n- <code>refresh_token</code> - using a refresh token that was received from an earlier invocation\n\nThe response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can \nbe used to get a new set of tokens.\n",
        "summary": "Authenticate"
      }
    },
    "/private/create_deposit_address": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_deposit_address_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Creates deposit address in currency",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "wallet",
          "private"
        ]
      }
    },
    "/public/get_trade_volumes": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public_get_trades_volumes_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves aggregated 24h trade volumes for different instrument types and currencies.",
        "parameters": [],
        "tags": [
          "market_data",
          "public"
        ]
      }
    },
    "/private/get_email_language": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private_get_email_language_response"
                }
              }
            },
            "description": "foo"
          }
        },
        "summary": "Retrieves the language to be used for emails.",
        "parameters": [],
        "tags": [
          "account_management",
          "private"
        ]
      }
    }
  },
  "components": {
    "x-sections": {
      "subscriptions": {
        "introduction": "#Subscriptions\n\nThe [subscribe](#private-subscribe) method can be used to subscribe to one \nor more *channels*. This section provides an overview of the channels and\nthe notifications that the subscriber will receive for each of those channels.\n\nIn most cases the channel name is constructed from a couple \nof elements. This makes it possible to specify exactly which\ninformation is required, and/or the frequency or aggregation level.\nThese elements are considered parameters for the subscription.\n\nFor example, when subscribing to the channel\n<code>book.BTC-27JUL18.10.20.100ms</code>, the element\n<code>BTC-27JUL18</code> specifies that the name of the instrument\n(see [naming](#naming)), <code>10</code> means that the results\nshould be grouped to that precision, etc.\n\nAs described in [notifications](#notifications), response data includes fields \nrequired by JSON-RPC and part dedicated for subscription data. \n\n<p>\n  <table>\n      <thead>\n          <tr>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Description</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>jsonrpc</td>\n              <td>string</td>\n              <td>The JSON-RPC version (2.0)</td>\n          </tr>\n          <tr>\n              <td>method</td>\n              <td>string</td>\n              <td>Here it's always <code>subscription</code></td>\n          </tr>\n          <tr>\n              <td>params</td>\n              <td><em>object</em></td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>&nbsp;&nbsp;›&nbsp;&nbsp;channel</td>\n              <td>string</td>\n              <td>The same channel as given when subscribing to notifications</td>\n          </tr>\n          <tr>\n              <td>&nbsp;&nbsp;›&nbsp;&nbsp;data</td>\n              <td><em>object</em></td>\n              <td>Data specific for the channel</td>\n          </tr>\n      </tbody>\n  </table>\n</p>\n\nFor all the following channel types only specific <code>data</code> part will be described.\n"
      }
    },
    "x-subscriptions": {
      "markprice.options.{index_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/markprice.options.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/markprice_options_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ],
        "summary": "Provides information about options markprices."
      },
      "estimated_expiration_price.{index_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/estimated_expiration_price.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/estimated_expiration_price_notification"
          }
        },
        "description": "Returns calculated (estimated) ending price for given index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "book.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/book.instrument_name.interval.repeated.json"
            },
            "firstObject": {
              "externalValue": "examples/notifications/book.instrument_name.interval.first.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/book_notification_raw"
          }
        },
        "description": "<p>Notifies about changes to the order book for a certain instrument.</p>\n<p>The first notification will contain the whole book (bid and ask amounts for all prices). After that there will only be information about changes to individual price levels.</p>\n<p>The first notification will contain the amounts for all price levels (list of <code>['new', price, amount]</code> tuples). All following notifications will contain a list of tuples with action, price level and new amount (<code>[action, price, amount]</code>). Action can be either <code>new</code>, <code>change</code> or <code>delete</code>.\n<p>Each notification will contain a <code>change_id</code> field, and each message except for the first one will contain a field <code>prev_change_id</code>. If <code>prev_change_id</code> is equal to the <code>change_id</code> of the previous message, this means that no messages have been missed.</p>\n<p>The amount for perpetual and futures is in USD units, for options it is in corresponding cryptocurrency contracts, e.g., BTC or ETH.</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "name": "interval",
            "schema": {
              "enum": [
                "raw",
                "100ms"
              ],
              "type": "string"
            }
          }
        ],
        "summary": "Notifies about changes to the order book for a certain instrument."
      },
      "perpetual.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/perpetual.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/perpetual_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Provide current interest rate - but only for **perpetual** instruments. Other types won't generate any notification."
      },
      "user.trades.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.trades.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/user_trade"
          }
        },
        "tags": [
          "private"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about user's trades in an instrument."
      },
      "ticker.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/ticker.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/ticker_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Key information about the instrument"
      },
      "user.orders.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/order"
          }
        },
        "tags": [
          "private"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_any"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about changes in user's orders in instruments of given kind and currency."
      },
      "deribit_price_ranking.{index_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_price_ranking.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/deribit_price_ranking_notification"
          }
        },
        "description": "Provides information about current value (price) for stock exchanges used to calculate Deribit Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      },
      "book.{instrument_name}.{group}.{depth}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/book.instrument_name.group.depth.interval.repeated.json"
            },
            "firstObject": {
              "externalValue": "examples/notifications/book.instrument_name.group.depth.interval.first.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/book_notification"
          }
        },
        "description": "<p>Notifies about changes to the order book for a certain instrument.</p>\nNotifications are sent once per specified interval, with prices grouped by (rounded to) the specified group, showing the complete order book to the specified depth (number of price levels).</p>\n<p>The 'asks' and the 'bids' elements in the response are both a 'list of lists'. Each element in the outer list is a list of exactly two elements: price and amount.</p>\n<p>*price* is a price level (USD per BTC, rounded as specified by the 'group' parameter for the susbcription).</p>\n<p>*amount* indicates the amount of all orders at price level. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "required": true,
            "summary": "Group prices (by rounding). Use 'none' for no grouping.",
            "description": "Group prices (by rounding). Use <code>none</code> for no grouping.<br>",
            "name": "group",
            "schema": {
              "enum": [
                "none",
                1,
                2,
                5,
                10
              ],
              "type": "string",
              "example": 10
            }
          },
          {
            "description": "Number of price levels to be included.",
            "required": true,
            "name": "depth",
            "schema": {
              "enum": [
                1,
                10,
                20
              ],
              "type": "integer",
              "example": 20
            }
          },
          {
            "description": "Frequency of notifications. Events will be aggregated over this interval.",
            "required": true,
            "name": "interval",
            "schema": {
              "enum": [
                "100ms"
              ],
              "type": "string"
            }
          }
        ],
        "summary": "Aggregated notifications about changes to the order book for a certain instrument."
      },
      "user.orders.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.orders.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/order"
          }
        },
        "tags": [
          "private"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about changes in user's orders for given instrument."
      },
      "trades.{instrument_name}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/trades.instrument_name.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/public_trade"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about trades for an instrument."
      },
      "quote.{instrument_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/quote.instrument_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/quote_notification"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/instrument_name"
          }
        ],
        "summary": "Best bid/ask price and size."
      },
      "user.portfolio.{currency}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.portfolio.currency.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/user_portfolio_notification"
          }
        },
        "description": "Provides information about current user portfolio",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          }
        ],
        "tags": [
          "private"
        ]
      },
      "user.trades.{kind}.{currency}.{interval}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/user.trades.kind.currency.interval.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/user_trade"
          }
        },
        "tags": [
          "private"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kind_with_any"
          },
          {
            "$ref": "#/components/parameters/currency_with_any"
          },
          {
            "$ref": "#/components/parameters/subscription_interval"
          }
        ],
        "summary": "Get notifications about user's trades in any instrument of given kind in given currency."
      },
      "announcements": {
        "notifications": {
          "schema": {
            "$ref": "#/components/schemas/announcement_notification"
          }
        },
        "summary": "General announcements concerning the Deribit platform.",
        "tags": [
          "private"
        ]
      },
      "deribit_price_index.{index_name}": {
        "notifications": {
          "examples": {
            "repeatedObject": {
              "externalValue": "examples/notifications/deribit_price_index.index_name.repeated.json"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/deribit_price_index_notification"
          }
        },
        "description": "Provides information about current value (price) for Deribit Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/index_name"
          }
        ]
      }
    },
    "schemas": {
      "order_id_initial_margin_pair": {
        "required": [
          "order_id",
          "initial_margin"
        ],
        "type": "object",
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "initial_margin": {
            "type": "number",
            "description": "Initial margin of order, in base currency"
          }
        }
      },
      "deribit_price_index_notification": {
        "required": [
          "timestamp",
          "price",
          "index_name"
        ],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "price": {
            "type": "number",
            "example": 8247.27,
            "description": "Current value of Deribit Index"
          },
          "index_name": {
            "type": "string",
            "example": "btc_usd"
          }
        }
      },
      "trade": {
        "required": [
          "label",
          "selfTrade",
          "quantity",
          "price",
          "tradeSeq",
          "matchingId"
        ],
        "type": "object",
        "properties": {
          "selfTrade": {
            "type": "boolean",
            "description": "true if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that."
          },
          "quantity": {
            "type": "integer",
            "description": "Trade quantity"
          },
          "price": {
            "type": "number",
            "example": 8358.12
          },
          "tradeSeq": {
            "type": "integer",
            "description": "Trade sequence number for the instrument"
          },
          "matchingId": {
            "type": "integer",
            "description": "Matching order id"
          },
          "label": {
            "type": "string",
            "description": "user defined label"
          }
        }
      },
      "public_get_option_mark_prices_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "description": "Object with instrument names as keys and two elements arrays as value. First element in array is mark price and second one is iv."
          }
        }
      },
      "public_auth_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "access_token",
              "token_type",
              "expires_in",
              "refresh_token",
              "scope"
            ],
            "type": "object",
            "properties": {
              "token_type": {
                "enum": [
                  "bearer"
                ],
                "type": "string",
                "description": "Authorization type, allowed value - `bearer`"
              },
              "state": {
                "type": "string",
                "description": "Copied from the input (if applicable)"
              },
              "scope": {
                "type": "string",
                "description": "Type of the access for assigned token"
              },
              "access_token": {
                "type": "string",
                "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7"
              },
              "expires_in": {
                "type": "integer",
                "description": "Token lifetime in seconds",
                "example": 315360000
              },
              "refresh_token": {
                "type": "string",
                "description": "Can be used to request a new token (with a new lifetime)",
                "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91"
              }
            }
          }
        }
      },
      "book_entry": {
        "required": [
          "amount",
          "price",
          "quantity",
          "cumulative_quantity",
          "cumulative_amount"
        ],
        "type": "object",
        "properties": {
          "cumulative_amount": {
            "$ref": "#/components/schemas/cumulative_amount"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "cumulative_quantity": {
            "$ref": "#/components/schemas/cumulative_quantity"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "quantity": {
            "$ref": "#/components/schemas/quantity"
          }
        }
      },
      "portfolio": {
        "required": [
          "btc",
          "eth"
        ],
        "type": "object",
        "properties": {
          "eth": {
            "$ref": "#/components/schemas/currency_portfolio"
          },
          "btc": {
            "$ref": "#/components/schemas/currency_portfolio"
          }
        }
      },
      "settlement": {
        "required": [
          "type",
          "timestamp",
          "session_profit_loss",
          "position",
          "instrument_name",
          "index_price",
          "funding"
        ],
        "type": "object",
        "properties": {
          "session_profit_loss": {
            "type": "number",
            "description": "total value of session profit and losses (in base currency)",
            "example": 0.001160788
          },
          "mark_price": {
            "type": "number",
            "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
            "example": 11000
          },
          "funding": {
            "type": "number",
            "description": "funding (in base currency ; settlement for perpetual product only)",
            "example": -2.511e-06
          },
          "socialized": {
            "type": "number",
            "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
            "example": -0.001160788
          },
          "session_bankrupcy": {
            "type": "number",
            "description": "value of session bankrupcy (in base currency; bankruptcy only)",
            "example": 0.001160788
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "profit_loss": {
            "type": "number",
            "description": "profit and loss (in base currency; settlement and delivery only)",
            "example": 0
          },
          "funded": {
            "type": "number",
            "description": "funded amount (bankruptcy only)",
            "example": 0
          },
          "index_price": {
            "type": "number",
            "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
            "example": 11008.37
          },
          "session_tax": {
            "type": "number",
            "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
            "example": -0.001160788
          },
          "session_tax_rate": {
            "type": "number",
            "description": "rate of paid texes/fees (in base currency; bankruptcy only)",
            "example": 0.000103333
          },
          "instrument_name": {
            "type": "string",
            "description": "instrument name (settlement and delivery only)",
            "example": "BTC-30MAR18"
          },
          "position": {
            "type": "number",
            "description": "position size (in quote currency; settlement and delivery only)",
            "example": 1000
          },
          "type": {
            "$ref": "#/components/schemas/settlement_type"
          }
        }
      },
      "private_orderhistory_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "orderId",
              "type",
              "instrument",
              "direction",
              "price",
              "label",
              "quantity",
              "filledQuantity",
              "avgPrice",
              "commission",
              "created",
              "lastUpdate",
              "state",
              "postOnly",
              "api",
              "max_show",
              "adv",
              "implv",
              "usd",
              "stopPx",
              "execInst",
              "triggered"
            ],
            "type": "object",
            "properties": {
              "orderId": {
                "type": "number",
                "description": "id of the order",
                "example": 713637304
              },
              "lastUpdate": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was last updated",
                "example": 1517614581664
              },
              "direction": {
                "type": "string",
                "description": "direction, `\"buy\"` or `\"sell\"`",
                "example": "buy"
              },
              "triggered": {
                "type": "boolean",
                "description": "Whether the stop order has been triggered (Only for future stop orders)",
                "example": false
              },
              "price": {
                "type": "number",
                "description": "price",
                "example": 10100
              },
              "filledQuantity": {
                "type": "number",
                "description": "The number of contracts already filled",
                "example": 700
              },
              "avgPrice": {
                "type": "number",
                "description": "average fill price of the order",
                "example": 10100
              },
              "api": {
                "type": "boolean",
                "description": "true - created with API",
                "example": true
              },
              "execInst": {
                "type": "string",
                "description": "Defines trigger type, required for stop limit orders, possible values `\"index_price\"`, `\"mark_price\"`  (Only valid for stop orders)",
                "example": "index_price"
              },
              "implv": {
                "type": "number",
                "description": "Option implied volatility in percent. (Only when `adv=implv`)",
                "example": 250
              },
              "adv": {
                "type": "boolean",
                "description": "advanced type (`false`, or `\"usd\"` or `\"implv\"`)",
                "example": "false"
              },
              "usd": {
                "type": "number",
                "description": "Option price in USD (Only if `adv=usd`)",
                "example": 50
              },
              "stopPx": {
                "type": "number",
                "description": "stop price (Only for future stop orders)",
                "example": 10000
              },
              "commission": {
                "type": "number",
                "description": "Commission paid so far (in BTC)",
                "example": 0
              },
              "max_show": {
                "type": "number",
                "description": "Maximum quantity within an order to be shown to other customers, 0 for invisible order.",
                "example": 1
              },
              "created": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was created",
                "example": 1517614581664
              },
              "postOnly": {
                "type": "boolean",
                "description": "true for post-only orders only",
                "example": true
              },
              "label": {
                "type": "string",
                "description": "user defined label (up to 32 characters)",
                "example": "MyOrder"
              },
              "instrument": {
                "type": "string",
                "description": "instrument name of the order",
                "example": "BTC-23FEB18"
              },
              "state": {
                "type": "string",
                "description": "order state",
                "example": "open"
              },
              "type": {
                "type": "string",
                "description": "order type, `\"limit\"`, `\"market\"`, `\"stop_limit\"`",
                "example": "limit"
              },
              "quantity": {
                "type": "number",
                "description": "The number of contracts to be traded",
                "example": 1000
              }
            }
          }
        }
      },
      "private_get_positions_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/position"
            },
            "type": "array"
          }
        }
      },
      "ticker_notification_with_bids_and_asks": {
        "required": [
          "instrument_name",
          "timestamp",
          "state",
          "stats",
          "open_interest",
          "index_price",
          "best_bid_price",
          "best_bid_amount",
          "best_ask_price",
          "best_ask_amount",
          "min_price",
          "max_price",
          "mark_price",
          "last_price",
          "bids",
          "asks"
        ],
        "properties": {
          "best_bid_amount": {
            "$ref": "#/components/schemas/best_bid_amount"
          },
          "best_ask_amount": {
            "$ref": "#/components/schemas/best_ask_amount"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "last_price": {
            "$ref": "#/components/schemas/last_price"
          },
          "delivery_price": {
            "$ref": "#/components/schemas/delivery_price"
          },
          "underlying_price": {
            "$ref": "#/components/schemas/underlying_price"
          },
          "ask_iv": {
            "$ref": "#/components/schemas/ask_iv"
          },
          "best_bid_price": {
            "$ref": "#/components/schemas/best_bid_price"
          },
          "open_interest": {
            "$ref": "#/components/schemas/open_interest"
          },
          "funding_8h": {
            "$ref": "#/components/schemas/funding_8h"
          },
          "bid_iv": {
            "$ref": "#/components/schemas/bid_iv"
          },
          "underlying_index": {
            "$ref": "#/components/schemas/underlying_index"
          },
          "mark_price": {
            "$ref": "#/components/schemas/mark_price"
          },
          "stats": {
            "$ref": "#/components/schemas/stats"
          },
          "asks": {
            "$ref": "#/components/schemas/asks"
          },
          "mark_iv": {
            "$ref": "#/components/schemas/mark_iv"
          },
          "greeks": {
            "$ref": "#/components/schemas/greeks"
          },
          "interest_rate": {
            "$ref": "#/components/schemas/interest_rate"
          },
          "settlement_price": {
            "$ref": "#/components/schemas/settlement_price"
          },
          "bids": {
            "$ref": "#/components/schemas/bids"
          },
          "index_price": {
            "$ref": "#/components/schemas/index_price"
          },
          "state": {
            "$ref": "#/components/schemas/book_state"
          },
          "min_price": {
            "$ref": "#/components/schemas/min_price"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "best_ask_price": {
            "$ref": "#/components/schemas/best_ask_price"
          },
          "max_price": {
            "$ref": "#/components/schemas/max_price"
          },
          "current_funding": {
            "$ref": "#/components/schemas/current_funding"
          }
        }
      },
      "mark_price_info": {
        "properties": {
          "mark_price": {
            "type": "number",
            "example": 0.0455,
            "description": "mark_price of instrument"
          },
          "instrument_name": {
            "type": "string",
            "example": "BTC-27JUL18",
            "description": "instrument name"
          },
          "iv": {
            "type": "number",
            "example": 1.23,
            "description": "implied volatility of mark price"
          }
        }
      },
      "instrument": {
        "required": [
          "kind",
          "base_currency",
          "quote_currency",
          "min_trade_amount",
          "instrument_name",
          "is_active",
          "settlement_period",
          "creation_timestamp",
          "tick_size",
          "expiration_timestamp",
          "contract_size"
        ],
        "type": "object",
        "properties": {
          "quote_currency": {
            "enum": [
              "USD"
            ],
            "type": "string",
            "description": "The currency in which the instrument prices are quoted."
          },
          "kind": {
            "$ref": "#/components/schemas/kind"
          },
          "tick_size": {
            "type": "number",
            "example": 0.0001,
            "description": "specifies minimal price change and, as follows, the number of decimal places for instrument prices"
          },
          "contract_size": {
            "type": "number",
            "description": "Contract size for instrument",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the instrument can currently be traded."
          },
          "option_type": {
            "enum": [
              "call",
              "put"
            ],
            "type": "string",
            "description": "The option type (only for options)"
          },
          "min_trade_amount": {
            "type": "number",
            "description": "Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "example": 0.1
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "settlement_period": {
            "enum": [
              "month",
              "week",
              "perpetual"
            ],
            "type": "string",
            "description": "The settlement period."
          },
          "strike": {
            "type": "number",
            "description": "The strike value. (only for options)"
          },
          "base_currency": {
            "enum": [
              "BTC",
              "ETH"
            ],
            "type": "string",
            "description": "The underlying currency being traded."
          },
          "creation_timestamp": {
            "type": "integer",
            "description": "The time when the instrument was first created (milliseconds)",
            "example": 1536569522277
          },
          "expiration_timestamp": {
            "type": "integer",
            "description": "The time when the instrument will expire (milliseconds)"
          }
        }
      },
      "private_get_order_state_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/order"
          }
        }
      },
      "public_index_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "BTC",
              "edp"
            ],
            "type": "object",
            "properties": {
              "edp": {
                "type": "number",
                "description": "Estimated delivery price for the currency. For more details, see Documentation > General > Expiration Price",
                "example": 11628.81
              },
              "ETH": {
                "type": "number",
                "description": "The current index price for ETH-USD (only for selected currency == ETH)",
                "example": 328.81
              },
              "BTC": {
                "type": "number",
                "description": "The current index price for BTC-USD (only for selected currency == BTC)",
                "example": 11628.81
              }
            }
          }
        }
      },
      "order_v1": {
        "required": [
          "order_id",
          "order_state",
          "order_type",
          "instrument",
          "created",
          "last_update",
          "direction",
          "price",
          "label",
          "post_only",
          "api",
          "max_show"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "triggered": {
            "$ref": "#/components/schemas/triggered"
          },
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "api": {
            "$ref": "#/components/schemas/api"
          },
          "order_state": {
            "$ref": "#/components/schemas/order_state"
          },
          "last_update": {
            "$ref": "#/components/schemas/timestamp"
          },
          "implv": {
            "$ref": "#/components/schemas/implv"
          },
          "advanced": {
            "$ref": "#/components/schemas/advanced"
          },
          "post_only": {
            "$ref": "#/components/schemas/post_only"
          },
          "usd": {
            "$ref": "#/components/schemas/usd"
          },
          "stop_price": {
            "$ref": "#/components/schemas/stop_price"
          },
          "order_type": {
            "$ref": "#/components/schemas/order_type"
          },
          "instrument": {
            "type": "string",
            "example": "ETH-PERPETUAL"
          },
          "max_show": {
            "$ref": "#/components/schemas/max_show"
          },
          "created": {
            "$ref": "#/components/schemas/timestamp"
          },
          "label": {
            "$ref": "#/components/schemas/label"
          },
          "commission": {
            "$ref": "#/components/schemas/commission"
          },
          "trigger": {
            "$ref": "#/components/schemas/trigger"
          },
          "filled_quantity": {
            "$ref": "#/components/schemas/filled_quantity"
          },
          "average_price": {
            "$ref": "#/components/schemas/average_price"
          },
          "quantity": {
            "$ref": "#/components/schemas/quantity"
          }
        }
      },
      "public_currencies_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/currency"
            },
            "type": "array"
          }
        }
      },
      "book_summary": {
        "required": [
          "instrument_name",
          "high",
          "low",
          "base_currency",
          "quote_currency",
          "volume",
          "bid_price",
          "ask_price",
          "mid_price",
          "mark_price",
          "last",
          "open_interest",
          "creation_timestamp"
        ],
        "properties": {
          "underlying_index": {
            "type": "string",
            "description": "Name of the underlying future, or `'index_price'` (options only)",
            "example": "index_price"
          },
          "volume": {
            "type": "number",
            "description": "The total 24h traded volume (in base currency)",
            "example": 223
          },
          "volume_usd": {
            "type": "number",
            "description": "Volume in usd (futures only)",
            "example": 102
          },
          "underlying_price": {
            "type": "number",
            "description": "underlying price for implied volatility calculations (options only)",
            "example": 6745.34
          },
          "bid_price": {
            "type": "number",
            "description": "The current best bid price, `null` if there aren't any bids",
            "example": 7022.89
          },
          "open_interest": {
            "type": "number",
            "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.",
            "example": 0.5
          },
          "quote_currency": {
            "type": "string",
            "description": "Quote currency",
            "example": "USD"
          },
          "high": {
            "type": "number",
            "description": "Price of the 24h highest trade",
            "example": 7022.89
          },
          "estimated_delivery_price": {
            "type": "number",
            "description": "Estimated delivery price, in USD (futures only). For more details, see Documentation > General > Expiration Price",
            "example": 10029.5
          },
          "last": {
            "type": "number",
            "description": "The price of the latest trade, `null` if there weren't any trades",
            "example": 7022.89
          },
          "mid_price": {
            "type": "number",
            "description": "The average of the best bid and ask, `null` if there aren't any asks or bids",
            "example": 7022.89
          },
          "interest_rate": {
            "type": "number",
            "description": "Interest rate used in implied volatility calculations (options only)",
            "example": 0
          },
          "funding_8h": {
            "type": "number",
            "description": "Funding 8h (perpetual only)"
          },
          "mark_price": {
            "type": "number",
            "description": "The current instrument market price",
            "example": 7022.89
          },
          "ask_price": {
            "type": "number",
            "description": "The current best ask price, `null` if there aren't any asks",
            "example": 7022.89
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "low": {
            "type": "number",
            "description": "Price of the 24h lowest trade, `null` if there weren't any trades",
            "example": 7022.89
          },
          "base_currency": {
            "type": "string",
            "description": "Base currency",
            "example": "ETH"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "current_funding": {
            "type": "number",
            "description": "Current funding (perpetual only)",
            "example": 0.12344
          }
        }
      },
      "private_deposit_address_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "creation_timestamp",
              "currency",
              "address",
              "type"
            ],
            "type": "object",
            "description": "Object if address is created, null otherwise",
            "properties": {
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "address": {
                "$ref": "#/components/schemas/currency_address"
              },
              "type": {
                "$ref": "#/components/schemas/wallet_address_type"
              },
              "creation_timestamp": {
                "$ref": "#/components/schemas/timestamp"
              }
            }
          }
        }
      },
      "public_trade": {
        "required": [
          "trade_id",
          "instrument_name",
          "timestamp",
          "trade_seq",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount"
        ],
        "properties": {
          "direction": {
            "description": "Trade direction of the taker",
            "$ref": "#/components/schemas/direction"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/tick_direction"
          },
          "timestamp": {
            "type": "integer",
            "description": "The timestamp of the trade",
            "example": 1517329113791
          },
          "price": {
            "description": "The price of the trade",
            "$ref": "#/components/schemas/price"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/trade_seq"
          },
          "trade_id": {
            "$ref": "#/components/schemas/trade_id"
          },
          "iv": {
            "type": "number",
            "description": "Option implied volatility for the price (Option only)"
          },
          "index_price": {
            "type": "number",
            "description": "Index Price at the moment of trade"
          },
          "amount": {
            "type": "number",
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH."
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          }
        }
      },
      "private_settlementhistory_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "type",
              "timeStamp",
              "sessionProfitLoss",
              "position",
              "instrument",
              "indexPrice",
              "markPrice",
              "profitLoss",
              "funded",
              "socialized",
              "sessionBankrupcy",
              "sessionTaxRate",
              "sessionTax"
            ],
            "type": "object",
            "properties": {
              "position": {
                "type": "string",
                "description": "position size  (settlement and delivery only)",
                "example": "1000"
              },
              "socialized": {
                "type": "number",
                "description": "The amount of the losses socialized",
                "example": "-3e-9"
              },
              "timeStamp": {
                "type": "integer",
                "description": "The timestamp of the settlement",
                "example": 1517299201923
              },
              "sessionProfitLoss": {
                "type": "string",
                "example": "4.17243092"
              },
              "funded": {
                "type": "string",
                "description": "Funded amount (bankruptcy only)",
                "example": "0"
              },
              "instrument": {
                "type": "string",
                "description": "instrument name (settlement and delivery only)",
                "example": "BTC-30MAR18"
              },
              "sessionBankrupcy": {
                "type": "number",
                "description": "in BTC",
                "example": 0.001160788
              },
              "profitLoss": {
                "type": "number",
                "description": "profit and loss (settlement and delivery only)",
                "example": 0
              },
              "sessionTaxRate": {
                "type": "number",
                "description": "in BTC",
                "example": 0.000103333
              },
              "sessionTax": {
                "type": "number",
                "description": "in BTC",
                "example": "-3e-9"
              },
              "markPrice": {
                "type": "number",
                "description": "Mark price for at the time  (settlement and delivery only)",
                "example": 11000
              },
              "type": {
                "$ref": "#/components/schemas/settlement_type"
              },
              "indexPrice": {
                "type": "number",
                "description": "Underlying index price at time of event (settlement and delivery only)",
                "example": 11008.37
              }
            }
          }
        }
      },
      "get_announcements_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "required": [
                "title",
                "body",
                "important",
                "id",
                "publication_time"
              ],
              "type": "object",
              "properties": {
                "body": {
                  "type": "string",
                  "description": "The HTML body of the announcement",
                  "example": "An&nbsp;announcement"
                },
                "publication_time": {
                  "type": "integer",
                  "description": "The timestamp in ms at which the announcement was published",
                  "example": 1527844253000
                },
                "important": {
                  "type": "boolean",
                  "description": "Whether the announcement is marked as important",
                  "example": false
                },
                "id": {
                  "type": "number",
                  "description": "A unique identifier for the announcement",
                  "example": 19288317
                },
                "title": {
                  "type": "string",
                  "description": "The title of the announcement",
                  "example": "Example announcement"
                }
              }
            },
            "type": "array"
          }
        }
      },
      "public_get_trades_volumes_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/trades_volumes"
            },
            "type": "array"
          }
        }
      },
      "private_subscribe_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "type": "string",
              "example": "deribit_price_index.btc_usd"
            },
            "type": "array",
            "description": "A list of subscribed channels."
          }
        }
      },
      "private_getopenorders_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "orderId",
              "type",
              "instrument",
              "direction",
              "price",
              "label",
              "quantity",
              "filledQuantity",
              "avgPrice",
              "commission",
              "created",
              "lastUpdate",
              "state",
              "postOnly",
              "api",
              "max_show",
              "adv",
              "implv",
              "usd",
              "stopPx",
              "execInst",
              "triggered"
            ],
            "type": "object",
            "properties": {
              "orderId": {
                "type": "number",
                "description": "id of the order",
                "example": 713637304
              },
              "lastUpdate": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was last updated",
                "example": 1517614581664
              },
              "direction": {
                "type": "string",
                "description": "direction, `\"buy\"` or `\"sell\"`",
                "example": "buy"
              },
              "triggered": {
                "type": "boolean",
                "description": "Whether the stop order has been triggered (Only for future stop orders)",
                "example": false
              },
              "price": {
                "type": "number",
                "description": "price",
                "example": 10100
              },
              "filledQuantity": {
                "type": "number",
                "description": "The number of contracts already filled",
                "example": 700
              },
              "avgPrice": {
                "type": "number",
                "description": "average fill price of the order",
                "example": 10100
              },
              "api": {
                "type": "boolean",
                "description": "true - created with API",
                "example": true
              },
              "execInst": {
                "type": "string",
                "description": "Defines trigger type, required for stop limit orders, possible values `\"index_price\"`, `\"mark_price\"`  (Only valid for stop orders)",
                "example": "index_price"
              },
              "implv": {
                "type": "number",
                "description": "Option implied volatility in percent. (Only when `adv=implv`)",
                "example": 250
              },
              "adv": {
                "type": "boolean",
                "description": "advanced type (`false`, or `usd` or `implv`)",
                "example": "false"
              },
              "usd": {
                "type": "number",
                "description": "Option price in USD (Only if `adv=usd`)",
                "example": 50
              },
              "stopPx": {
                "type": "number",
                "description": "stop price (Only for future stop orders)",
                "example": 10000
              },
              "commission": {
                "type": "number",
                "description": "Commission paid so far (in BTC)",
                "example": 0
              },
              "max_show": {
                "type": "number",
                "description": "Maximum quantity within an order to be shown to other customers, 0 for invisible order.",
                "example": 1
              },
              "created": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was created",
                "example": 1517614581664
              },
              "postOnly": {
                "type": "boolean",
                "description": "`true` for post-only orders only",
                "example": true
              },
              "label": {
                "type": "string",
                "description": "user defined label (up to 32 characters)",
                "example": "MyOrder"
              },
              "instrument": {
                "type": "string",
                "description": "instrument name of the order",
                "example": "BTC-23FEB18"
              },
              "state": {
                "type": "string",
                "description": "order state",
                "example": "open"
              },
              "type": {
                "type": "string",
                "description": "order type, `\"limit\"`,` \"market\"`, `\"stop_limit\"`",
                "example": "limit"
              },
              "quantity": {
                "type": "number",
                "description": "The number of contracts to be traded",
                "example": 1000
              }
            }
          }
        }
      },
      "public_get_order_book_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ticker_notification_with_bids_and_asks"
          }
        }
      },
      "private_cancel_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/order"
          }
        }
      },
      "private_positions_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "instrument",
              "kind",
              "currency",
              "size",
              "averagePrice",
              "direction",
              "sizeBtc",
              "sizeCurrency",
              "floatingPl",
              "realizedPl",
              "estLiqPrice",
              "markPrice",
              "indexPrice",
              "maintenanceMargin",
              "initialMargin",
              "settlementPrice",
              "delta",
              "openOrderMargin",
              "profitLoss"
            ],
            "type": "object",
            "properties": {
              "direction": {
                "type": "string",
                "description": "The direction of the position. Can be \"buy\" (long) or \"sell\" (short)",
                "example": "buy"
              },
              "sizeBtc": {
                "type": "number",
                "description": "position size in BTC (0 if currency <>`BTC`)",
                "example": 7.14775214
              },
              "settlementPrice": {
                "type": "number",
                "description": "The settlement price for the instrument",
                "example": 9145.26
              },
              "sizeCurrency": {
                "type": "number",
                "description": "position size in the base currency for the instrument",
                "example": 7.14775214
              },
              "currency": {
                "type": "string",
                "description": "The base currency of the instrument",
                "example": "BTC"
              },
              "floatingPl": {
                "type": "number",
                "description": "floating PnL",
                "example": -0.703874042
              },
              "delta": {
                "type": "number",
                "description": "The position delta",
                "example": 7.14775214
              },
              "indexPrice": {
                "type": "number",
                "description": "index price",
                "example": 8242.12
              },
              "size": {
                "type": "number",
                "description": "The position size in contracts. Can be negative (short) or positive (long)",
                "example": 5893
              },
              "kind": {
                "type": "string",
                "description": "The type of instrument. \"future\" or \"option\"",
                "example": "future"
              },
              "openOrderMargin": {
                "type": "number",
                "description": "The margin used to back the position",
                "example": 0
              },
              "estLiqPrice": {
                "type": "number",
                "description": "Estimated liquidation price",
                "example": 99999.99
              },
              "realizedPl": {
                "type": "number",
                "description": "realized PnL",
                "example": "0,"
              },
              "instrument": {
                "type": "string",
                "description": "name of the instrument",
                "example": "\"BTC-30MAR18\""
              },
              "initialMargin": {
                "type": "number",
                "description": "initial margin",
                "example": 0.357387607
              },
              "profitLoss": {
                "type": "number",
                "description": "The PnL for the position",
                "example": -1.068422015
              },
              "markPrice": {
                "type": "number",
                "description": "mark price",
                "example": 8244.55
              },
              "averagePrice": {
                "type": "number",
                "description": "average price for the position",
                "example": 9693.502194671
              },
              "maintenanceMargin": {
                "type": "number",
                "description": "maintenance margin",
                "example": 0.214432564
              }
            }
          }
        }
      },
      "private_get_email_language_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "The abbreviation of the language",
            "example": "en"
          }
        }
      },
      "user_trades_by_order_response": {
        "items": {
          "$ref": "#/components/schemas/user_trade"
        },
        "type": "array"
      },
      "private_get_order_history_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        }
      },
      "base_message": {
        "required": [
          "jsonrpc",
          "testnet",
          "usIn",
          "usOut",
          "usDiff"
        ],
        "properties": {
          "testnet": {
            "type": "boolean",
            "description": "false for production server, true for test server",
            "x-hide-in-docs": true
          },
          "jsonrpc": {
            "enum": [
              "2.0"
            ],
            "type": "string",
            "description": "The JSON-RPC version (2.0)"
          },
          "usDiff": {
            "type": "integer",
            "description": "Duration of the handling of the request, in microseconds",
            "x-hide-in-docs": true
          },
          "id": {
            "type": "integer",
            "description": "The id that was sent in the request"
          },
          "usOut": {
            "type": "integer",
            "description": "The timestamp (in microseconds) of sending of the response",
            "x-hide-in-docs": true
          },
          "usIn": {
            "type": "integer",
            "description": "The timestamp (in microseconds) of receipt of the request",
            "x-hide-in-docs": true
          }
        }
      },
      "public_get_contract_size_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "contract_size"
            ],
            "type": "object",
            "properties": {
              "contract_size": {
                "$ref": "#/components/schemas/contract_size"
              }
            }
          }
        }
      },
      "private_get_margins_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "buy",
              "sell",
              "min_price",
              "max_price"
            ],
            "type": "object",
            "properties": {
              "sell": {
                "type": "number",
                "description": "Margin when selling",
                "example": 0.01680479
              },
              "buy": {
                "type": "number",
                "description": "Margin when buying",
                "example": 0.01681367
              },
              "min_price": {
                "$ref": "#/components/schemas/min_price"
              },
              "max_price": {
                "$ref": "#/components/schemas/max_price"
              }
            }
          }
        }
      },
      "currency": {
        "required": [
          "currency",
          "currency_long",
          "min_confirmation",
          "withdrawal_fee",
          "coin_type"
        ],
        "type": "object",
        "properties": {
          "min_confirmations": {
            "type": "integer",
            "description": "Minimum number of block chain confirmations before deposit is accepted.",
            "example": 2
          },
          "min_withdrawal_fee": {
            "type": "number",
            "description": "The minimum transaction fee paid for withdrawals",
            "example": 0.0001
          },
          "disabled_deposit_address_creation": {
            "type": "boolean",
            "description": "False if deposit address creation is disabled",
            "example": false
          },
          "currency": {
            "type": "string",
            "description": "The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.",
            "example": "BTC"
          },
          "currency_long": {
            "type": "string",
            "description": "The full name for the currency.",
            "example": "Bitcoin"
          },
          "withdrawal_fee": {
            "type": "number",
            "description": "The total transaction fee paid for withdrawals",
            "example": 0.0001
          },
          "fee_precision": {
            "type": "integer",
            "description": "fee precision",
            "example": 4
          },
          "withdrawal_priorities": {
            "items": {
              "$ref": "#/components/schemas/key_number_pair"
            },
            "type": "array"
          },
          "coin_type": {
            "enum": [
              "BITCOIN",
              "ETHER"
            ],
            "type": "string",
            "description": "The type of the currency."
          }
        }
      },
      "private_get_open_orders_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        }
      },
      "error_message": {
        "required": [
          "message",
          "error"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "integer"
          }
        }
      },
      "private_withdraw_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/withdrawal"
          }
        }
      },
      "withdrawal": {
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "confirmed_timestamp",
          "updated_timestamp"
        ],
        "type": "object",
        "properties": {
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "fee": {
            "$ref": "#/components/schemas/fee"
          },
          "confirmed_timestamp": {
            "type": "integer",
            "description": "The timestamp (seconds since the Unix epoch, with millisecond precision) of withdrawal confirmation, `null` when not confirmed",
            "example": 1536569522277
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "priority": {
            "type": "number",
            "example": 1,
            "description": "Id of priority level"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "state": {
            "$ref": "#/components/schemas/withdrawal_state"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Withdrawal id in Deribit system"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/currency_transaction_id"
          }
        }
      },
      "perpetual_notification": {
        "required": [
          "interest"
        ],
        "properties": {
          "interest": {
            "type": "number",
            "description": "Current interest"
          }
        }
      },
      "markprice_options_notification": {
        "items": {
          "type": "object",
          "properties": {
            "mark_price": {
              "$ref": "#/components/schemas/mark_price"
            },
            "instrument_name": {
              "$ref": "#/components/schemas/instrument_name"
            },
            "iv": {
              "$ref": "#/components/schemas/implied_volatility"
            }
          }
        },
        "type": "array"
      },
      "user_portfolio_notification": {
        "required": [
          "currency",
          "equity",
          "maintenance_margin",
          "initial_margin",
          "available_funds",
          "available_withdrawal_funds",
          "balance",
          "margin_balance",
          "session_upl",
          "session_rpl",
          "total_pl",
          "options_pl",
          "options_session_upl",
          "options_session_rpl",
          "options_delta",
          "options_gamma",
          "options_vega",
          "options_theta",
          "futures_pl",
          "futures_session_upl",
          "futures_session_rpl",
          "delta_total",
          "session_funding",
          "portfolio_margining_enabled"
        ],
        "properties": {
          "delta_total": {
            "type": "number",
            "description": "The sum of position deltas",
            "example": 0.1334
          },
          "session_rpl": {
            "type": "number",
            "description": "Session realized profit and loss",
            "example": 0.1
          },
          "options_gamma": {
            "type": "number",
            "description": "Options summary gamma",
            "example": 0
          },
          "options_vega": {
            "type": "number",
            "description": "Options summary vega",
            "example": 0
          },
          "futures_session_rpl": {
            "type": "number",
            "description": "Futures session realized profit and Loss",
            "example": 0
          },
          "options_theta": {
            "type": "number",
            "description": "Options summary theta",
            "example": 0
          },
          "session_upl": {
            "type": "number",
            "description": "Session unrealized profit and loss",
            "example": 0.846863
          },
          "options_pl": {
            "type": "number",
            "description": "Options profit and Loss",
            "example": 0
          },
          "currency": {
            "type": "string",
            "description": "The selected currency",
            "example": "ETH"
          },
          "portfolio_margining_enabled": {
            "type": "boolean",
            "example": true,
            "description": "When `true` portfolio margining is enabled for user"
          },
          "margin_balance": {
            "type": "number",
            "description": "The account's margin balance",
            "example": 2.25
          },
          "futures_session_upl": {
            "type": "number",
            "description": "Futures session unrealized profit and Loss",
            "example": 0
          },
          "total_pl": {
            "type": "number",
            "description": "Profit and loss",
            "example": 0.02032221
          },
          "projected_maintenance_margin": {
            "type": "number",
            "description": "Projected maintenance margin (for portfolio margining users)",
            "example": 1
          },
          "initial_margin": {
            "type": "number",
            "description": "The account's initial margin",
            "example": 0.379882
          },
          "futures_pl": {
            "type": "number",
            "description": "Futures profit and Loss",
            "example": 0
          },
          "maintenance_margin": {
            "type": "number",
            "description": "The maintenance margin.",
            "example": 0.1334519
          },
          "available_withdrawal_funds": {
            "type": "number",
            "description": "The account's available to withdrawal funds",
            "example": 2.26
          },
          "options_session_rpl": {
            "type": "number",
            "description": "Options session realized profit and Loss",
            "example": 0
          },
          "options_session_upl": {
            "type": "number",
            "description": "Options session unrealized profit and Loss",
            "example": 0
          },
          "session_funding": {
            "type": "number",
            "description": "Session funding",
            "example": 0
          },
          "available_funds": {
            "type": "number",
            "description": "The account's available funds",
            "example": 2.2638913
          },
          "equity": {
            "type": "number",
            "description": "The account's current equity",
            "example": 2.6437733
          },
          "projected_initial_margin": {
            "type": "number",
            "description": "Projected initial margin (for portfolio margining users)",
            "example": 1
          },
          "balance": {
            "type": "number",
            "description": "The account's balance",
            "example": 3.4906363
          },
          "options_delta": {
            "type": "number",
            "description": "Options summary delta",
            "example": 0
          }
        }
      },
      "private_create_subaccount_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "username",
              "type",
              "id",
              "login_enabled",
              "is_password",
              "receive_notifications",
              "system_name",
              "tfa_enabled",
              "email"
            ],
            "type": "object",
            "properties": {
              "system_name": {
                "type": "string",
                "description": "System generated user nickname"
              },
              "username": {
                "type": "string",
                "description": "Account name (given by user)"
              },
              "is_password": {
                "type": "boolean",
                "description": "`true` when password for the subaccount has been configured"
              },
              "login_enabled": {
                "type": "boolean",
                "description": "Informs whether login to the subaccount is enabled"
              },
              "tfa_enabled": {
                "type": "boolean",
                "description": "Whether the two factor authentication is enabled"
              },
              "receive_notifications": {
                "type": "boolean",
                "description": "When `true` - receive all notification emails on the main email"
              },
              "email": {
                "type": "string",
                "description": "User email",
                "example": "user_ABC@deribit.com"
              },
              "portfolio": {
                "$ref": "#/components/schemas/portfolio"
              },
              "type": {
                "enum": [
                  "subaccount"
                ],
                "type": "string",
                "description": "Account type"
              },
              "id": {
                "type": "integer",
                "description": "Subaccount identifier"
              }
            }
          }
        }
      },
      "trades_volumes": {
        "required": [
          "currency_pair",
          "futures_volume",
          "puts_volume",
          "calls_volume"
        ],
        "type": "object",
        "properties": {
          "calls_volume": {
            "type": "number",
            "description": "Total 24h trade volume for call options. This is expressed in the base currency, e.g. BTC for `btc_usd`",
            "example": 2.1
          },
          "puts_volume": {
            "type": "number",
            "description": "Total 24h trade volume for put options. This is expressed in the base currency, e.g. BTC for `btc_usd`",
            "example": 60.2
          },
          "currency_pair": {
            "enum": [
              "btc_usd",
              "eth_usd"
            ],
            "type": "string",
            "description": "Currency pair: `\"btc_usd\"` or `\"eth_usd\"`"
          },
          "futures_volume": {
            "type": "number",
            "description": "Total 24h trade volume for futures. This is expressed in the base currency, e.g. BTC for `btc_usd`",
            "example": 30.5178
          }
        }
      },
      "private_get_withdrawals_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "data",
              "count"
            ],
            "type": "object",
            "properties": {
              "count": {
                "$ref": "#/components/schemas/result_count"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/withdrawal"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "public_get_book_summary_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/book_summary"
            },
            "type": "array"
          }
        }
      },
      "currency_portfolio": {
        "required": [
          "margin_balance",
          "currency",
          "maintenance_margin",
          "initial_margin",
          "equity",
          "balance",
          "available_withdrawal_funds",
          "available_funds"
        ],
        "type": "object",
        "properties": {
          "maintenance_margin": {
            "type": "number"
          },
          "available_withdrawal_funds": {
            "type": "number"
          },
          "initial_margin": {
            "type": "number"
          },
          "available_funds": {
            "type": "number"
          },
          "currency": {
            "enum": [
              "btc",
              "eth"
            ],
            "type": "string"
          },
          "margin_balance": {
            "type": "number"
          },
          "equity": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          }
        }
      },
      "private_get_order_margin_by_ids_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/order_id_initial_margin_pair"
            },
            "type": "array"
          }
        }
      },
      "private_ask_to_address_book_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/address_book_item"
          }
        }
      },
      "announcement_notification": {
        "required": [
          "title",
          "important",
          "id",
          "date",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "description": "milliseconds since the Unix epoch",
            "example": 1532593832021
          },
          "important": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          }
        }
      },
      "ok_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "enum": [
              "ok"
            ],
            "type": "string",
            "description": "Result of method execution. `ok` in case of success"
          }
        }
      },
      "get_time_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "description": "Current timestamp (milliseconds)",
            "example": 1517329113791
          }
        }
      },
      "public_get_instruments_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/instrument"
            },
            "type": "array"
          }
        }
      },
      "estimated_expiration_price_notification": {
        "required": [
          "seconds",
          "price",
          "is_estimated"
        ],
        "properties": {
          "seconds": {
            "type": "integer",
            "description": "Number of seconds till finalizing the nearest instrument"
          },
          "price": {
            "type": "number",
            "description": "Index current or estimated price",
            "example": 8247.27
          },
          "is_estimated": {
            "type": "boolean",
            "description": "When `true` then prize is given as an estimated value, otherwise it's current index price"
          }
        }
      },
      "private_buy_and_sell_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "order",
              "trades"
            ],
            "type": "object",
            "properties": {
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              },
              "order": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        }
      },
      "ticker_notification": {
        "required": [
          "instrument_name",
          "timestamp",
          "state",
          "stats",
          "open_interest",
          "index_price",
          "best_bid_price",
          "best_bid_amount",
          "best_ask_price",
          "best_ask_amount",
          "min_price",
          "max_price",
          "mark_price",
          "last_price"
        ],
        "properties": {
          "best_bid_amount": {
            "$ref": "#/components/schemas/best_bid_amount"
          },
          "best_ask_amount": {
            "$ref": "#/components/schemas/best_ask_amount"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "last_price": {
            "$ref": "#/components/schemas/last_price"
          },
          "delivery_price": {
            "$ref": "#/components/schemas/delivery_price"
          },
          "underlying_price": {
            "$ref": "#/components/schemas/underlying_price"
          },
          "ask_iv": {
            "$ref": "#/components/schemas/ask_iv"
          },
          "best_bid_price": {
            "$ref": "#/components/schemas/best_bid_price"
          },
          "open_interest": {
            "$ref": "#/components/schemas/open_interest"
          },
          "bid_iv": {
            "$ref": "#/components/schemas/bid_iv"
          },
          "underlying_index": {
            "$ref": "#/components/schemas/underlying_index"
          },
          "mark_price": {
            "$ref": "#/components/schemas/mark_price"
          },
          "stats": {
            "$ref": "#/components/schemas/stats"
          },
          "mark_iv": {
            "$ref": "#/components/schemas/mark_iv"
          },
          "greeks": {
            "$ref": "#/components/schemas/greeks"
          },
          "interest_rate": {
            "$ref": "#/components/schemas/interest_rate"
          },
          "settlement_price": {
            "$ref": "#/components/schemas/settlement_price"
          },
          "funding_8h": {
            "$ref": "#/components/schemas/funding_8h"
          },
          "index_price": {
            "$ref": "#/components/schemas/index_price"
          },
          "state": {
            "$ref": "#/components/schemas/book_state"
          },
          "min_price": {
            "$ref": "#/components/schemas/min_price"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "best_ask_price": {
            "$ref": "#/components/schemas/best_ask_price"
          },
          "max_price": {
            "$ref": "#/components/schemas/max_price"
          },
          "current_funding": {
            "$ref": "#/components/schemas/current_funding"
          }
        }
      },
      "private_tradehistory_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "tradeId",
              "instrument",
              "tradeSeq",
              "timeStamp",
              "quantity",
              "price",
              "direction",
              "tickDirection",
              "indexPrice",
              "iv"
            ],
            "type": "object",
            "properties": {
              "direction": {
                "type": "string",
                "description": "Trade direction of the taker",
                "example": "buy"
              },
              "tradeId": {
                "type": "string",
                "description": "The ID for the trade",
                "example": "49366"
              },
              "quantity": {
                "type": "string",
                "description": "The quantity traded",
                "example": "5"
              },
              "timeStamp": {
                "type": "integer",
                "description": "The timestamp of the trade in ms",
                "example": 1503439494351
              },
              "price": {
                "type": "string",
                "description": "The price of the trade",
                "example": "0.055"
              },
              "iv": {
                "type": "string",
                "description": "option implied volatility for the price (Options only)",
                "example": "70.71"
              },
              "instrument": {
                "type": "string",
                "description": "The name of the instrument",
                "example": "BTC-25AUG17-3900-C"
              },
              "indexPrice": {
                "type": "string",
                "description": "Index price at trade",
                "example": "4101.46"
              },
              "tickDirection": {
                "type": "string",
                "description": "Direction of the \"tick\".",
                "example": "1"
              },
              "tradeSeq": {
                "type": "string",
                "description": "The trade sequence number",
                "example": "1"
              }
            }
          }
        }
      },
      "private_get_transfers_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "data",
              "count"
            ],
            "type": "object",
            "properties": {
              "count": {
                "$ref": "#/components/schemas/result_count"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/transfer_item"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "private_orderstate_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "orderId",
              "type",
              "instrument",
              "direction",
              "price",
              "label",
              "quantity",
              "filledQuantity",
              "avgPrice",
              "commission",
              "created",
              "lastUpdate",
              "state",
              "postOnly",
              "api",
              "max_show",
              "adv",
              "implv",
              "usd",
              "stopPx",
              "execInst",
              "triggered"
            ],
            "type": "object",
            "properties": {
              "orderId": {
                "type": "number",
                "description": "id of the order",
                "example": 713637304
              },
              "lastUpdate": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was last updated",
                "example": 1517614581664
              },
              "direction": {
                "type": "string",
                "description": "direction, \"buy\" or \"sell\"",
                "example": "buy"
              },
              "triggered": {
                "type": "boolean",
                "description": "Whether the stop order has been triggered (Only for future stop orders)",
                "example": false
              },
              "price": {
                "type": "number",
                "description": "price",
                "example": 10100
              },
              "filledQuantity": {
                "type": "number",
                "description": "The number of contracts already filled",
                "example": 700
              },
              "avgPrice": {
                "type": "number",
                "description": "average fill price of the order",
                "example": 10100
              },
              "api": {
                "type": "boolean",
                "description": "true - created with API",
                "example": true
              },
              "execInst": {
                "type": "string",
                "description": "Defines trigger type, required for stop limit orders, possible values `\"index_price\"`, `\"mark_price\"`  (Only valid for stop orders)",
                "example": "index_price"
              },
              "implv": {
                "type": "number",
                "description": "Option implied volatility in percent. (Only when `adv=implv`)",
                "example": 250
              },
              "adv": {
                "type": "boolean",
                "description": "advanced type (`false`, or `\"usd\"` or `\"implv\"`)",
                "example": "false"
              },
              "usd": {
                "type": "number",
                "description": "Option price in USD (Only if `adv=usd`)",
                "example": 50
              },
              "stopPx": {
                "type": "number",
                "description": "stop price (Only for future stop orders)",
                "example": 10000
              },
              "commission": {
                "type": "number",
                "description": "Commission paid so far (in BTC)",
                "example": 0
              },
              "max_show": {
                "type": "number",
                "description": "Maximum quantity within an order to be shown to other customers, 0 for invisible order.",
                "example": 1
              },
              "created": {
                "type": "integer",
                "description": "The timestamp (in ms) that the order was created",
                "example": 1517614581664
              },
              "postOnly": {
                "type": "boolean",
                "description": "true for post-only orders only",
                "example": true
              },
              "label": {
                "type": "string",
                "description": "user defined label (up to 32 characters)",
                "example": "MyOrder"
              },
              "instrument": {
                "type": "string",
                "description": "instrument name of the order",
                "example": "BTC-23FEB18"
              },
              "state": {
                "type": "string",
                "description": "order state",
                "example": "open"
              },
              "type": {
                "type": "string",
                "description": "order type, `\"limit\"`, `\"market\"`, `\"stop_limit\"`",
                "example": "limit"
              },
              "quantity": {
                "type": "number",
                "description": "The number of contracts to be traded",
                "example": 1000
              }
            }
          }
        }
      },
      "book_notification_raw": {
        "required": [
          "instrument_name",
          "change_id",
          "asks",
          "bids"
        ],
        "properties": {
          "prev_change_id": {
            "type": "integer",
            "description": "id of the previous notification"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "asks": {
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The first notification will contain the amounts for all price levels (a list of [\"new\", price, amount] tuples). All following notifications will contain a list of tuples with action, price level and new amount ([action, price, amount]). Action can be 'new', 'change' or 'delete'."
            },
            "type": "array"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp_for_book_notifications"
          },
          "change_id": {
            "type": "integer",
            "description": "id of the notification"
          },
          "bids": {
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "(See 'asks' above.)"
            },
            "type": "array"
          }
        }
      },
      "book_notification": {
        "required": [
          "instrument_name",
          "change_id",
          "asks",
          "bids"
        ],
        "properties": {
          "change_id": {
            "type": "integer",
            "description": "id of the notification"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "bids": {
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "(See 'asks' above.)"
            },
            "type": "array"
          },
          "asks": {
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The first notification will contain the amounts for all price levels (a list of [\"new\", price, amount] tuples). All following notifications will contain a list of tuples with action, price level and new amount ([action, price, amount]). Action can be 'new', 'change' or 'delete'."
            },
            "type": "array"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp_for_book_notifications"
          }
        }
      },
      "private_submit_transfer_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/transfer_item"
          }
        }
      },
      "public_getorderbook_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "instrument",
              "bids",
              "asks",
              "tstamp",
              "last",
              "low",
              "high",
              "mark",
              "state",
              "settlementPrice",
              "deliveryPrice",
              "uPx",
              "uIx",
              "iR",
              "markIv",
              "askIv",
              "bidIv",
              "delta",
              "gamma",
              "vega",
              "theta",
              "max",
              "min",
              "quantity",
              "price",
              "cm",
              "oid"
            ],
            "type": "object",
            "properties": {
              "settlementPrice": {
                "type": "number",
                "description": "The settlement price for this instrument. Only when `state=open`",
                "example": "11013.37"
              },
              "bidIv": {
                "type": "number",
                "description": "(Only for option) implied volatility for best bid",
                "example": 109.99
              },
              "cm": {
                "type": "number",
                "description": "The cumulative quantity",
                "example": 800
              },
              "max": {
                "type": "number",
                "description": "(Only for futures) The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum."
              },
              "price": {
                "type": "number",
                "description": "The price level",
                "example": 10322.5
              },
              "oid": {
                "type": "number",
                "description": "(Only for options)The order id of an unfilled order you have at this price. This field only shows if you have an order at this price level, and the request has been [signed](rpc-authentication.md)."
              },
              "high": {
                "type": "number",
                "description": "The 24h high for the instrument",
                "example": 10916.03
              },
              "uIx": {
                "type": "number",
                "description": "(Only for option) underlying future instrument name or `\"index_price\"`",
                "example": "\"BTC-30MAR18\""
              },
              "uPx": {
                "type": "number",
                "description": "(Only for option) underlying price used for ask/bid implied volatility",
                "example": 10408.16
              },
              "delta": {
                "type": "number",
                "description": "(Only for options) The delta value for the option",
                "example": "-.35199"
              },
              "tstamp": {
                "type": "integer",
                "description": "The order book timestamp in milliseconds",
                "example": 1517329113791
              },
              "last": {
                "type": "number",
                "description": "The price for the last trade",
                "example": 10350
              },
              "asks": {
                "type": "array",
                "description": "The list of all asks, best ask first. See below for entry details",
                "example": "(see below)"
              },
              "min": {
                "type": "number",
                "description": "(Only for futures) The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum."
              },
              "markIv": {
                "type": "number",
                "description": "(Only for option) implied volatility for mark price",
                "example": 135
              },
              "iR": {
                "type": "number",
                "description": "(Only for option) Interest rate used for implied volatility calculations",
                "example": 0
              },
              "bids": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of all bids, best bid first. See below for entry details",
                "example": "(see below)"
              },
              "mark": {
                "type": "number",
                "description": "The mark price for the instrument",
                "example": 10334.06
              },
              "instrument": {
                "type": "string",
                "description": "The name of the instrument.",
                "example": "BTC-23FEB18"
              },
              "state": {
                "type": "string",
                "description": "The state of the order book. Possible values are `\"open\"` and `\"closed\"`.",
                "example": "open"
              },
              "vega": {
                "type": "number",
                "description": "(Only for option) The vega value for the option",
                "example": 11.98132
              },
              "low": {
                "type": "number",
                "description": "The 24h low for the instrument",
                "example": 10296.11
              },
              "theta": {
                "type": "number",
                "description": "(Only for option) The theta value for the option",
                "example": -6.7319
              },
              "askIv": {
                "type": "number",
                "description": "(Only for option) implied volatility for best ask",
                "example": 130.06
              },
              "deliveryPrice": {
                "type": "number",
                "description": "The settlement price for this instrument. Only when `state=closed`",
                "example": "11013.37"
              },
              "gamma": {
                "type": "number",
                "description": "(Only for options) The gamma value for the option",
                "example": 0.00011
              },
              "quantity": {
                "type": "number",
                "description": "The total quantity of orders for this price level",
                "example": 800
              }
            }
          }
        }
      },
      "private_get_deposits_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "data",
              "count"
            ],
            "type": "object",
            "properties": {
              "count": {
                "$ref": "#/components/schemas/result_count"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/deposit"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "private_get_subaccounts_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "required": [
                "username",
                "email",
                "type",
                "tfa_enabled",
                "receive_notifications",
                "is_password",
                "system_name",
                "id"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "system_name": {
                  "type": "string",
                  "description": "System generated user nickname"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "`true` when password for the subaccount has been configured"
                },
                "type": {
                  "enum": [
                    "main",
                    "subaccount"
                  ],
                  "type": "string"
                },
                "tfa_enabled": {
                  "type": "boolean",
                  "description": "Whether the two factor authentication is enabled"
                },
                "receive_notifications": {
                  "type": "boolean",
                  "description": "When `true` - receive all notification emails on the main email"
                },
                "id": {
                  "type": "integer",
                  "description": "Account/Subaccount identifier"
                },
                "not_confirmed_email": {
                  "type": "string",
                  "description": "New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`."
                },
                "portfolio": {
                  "description": "Only if with_portfolio == true",
                  "$ref": "#/components/schemas/portfolio"
                },
                "login_enabled": {
                  "type": "boolean",
                  "description": "Informs whether login to the subaccount is enabled"
                },
                "email": {
                  "type": "string",
                  "description": "User email"
                }
              }
            },
            "type": "array"
          }
        }
      },
      "transfer_item": {
        "required": [
          "currency",
          "id",
          "type",
          "amount",
          "state",
          "other_side",
          "updated_timestamp",
          "created_timestamp"
        ],
        "type": "object",
        "properties": {
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "direction": {
            "$ref": "#/components/schemas/transfer_direction"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "other_side": {
            "$ref": "#/components/schemas/transfer_other_side"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "state": {
            "$ref": "#/components/schemas/transfer_state"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "type": {
            "$ref": "#/components/schemas/transfer_type"
          },
          "id": {
            "$ref": "#/components/schemas/transfer_id"
          }
        }
      },
      "private_settlement_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "continuation",
              "settlements"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "properties": {
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "settlements": {
                "items": {
                  "$ref": "#/components/schemas/settlement"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "public_get_footer_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "required": [
                "title_en",
                "type",
                "name"
              ],
              "type": "object",
              "properties": {
                "title_zh": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "title_ru": {
                  "type": "string"
                },
                "title_ko": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "title_ja": {
                  "type": "string"
                },
                "title_en": {
                  "type": "string"
                }
              }
            },
            "type": "array"
          }
        }
      },
      "public_getlasttrades_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "tradeId",
              "instrument",
              "tradeSeq",
              "timeStamp",
              "quantity",
              "price",
              "direction",
              "tickDirection",
              "indexPrice",
              "iv"
            ],
            "type": "object",
            "properties": {
              "direction": {
                "type": "string",
                "description": "Trade direction of the taker",
                "example": "buy"
              },
              "tradeId": {
                "type": "string",
                "description": "The ID for the trade",
                "example": "49366"
              },
              "quantity": {
                "type": "string",
                "description": "The quantity traded",
                "example": "5"
              },
              "timeStamp": {
                "type": "integer",
                "description": "The timestamp of the trade in ms",
                "example": 1503439494351
              },
              "price": {
                "type": "string",
                "description": "The price of the trade",
                "example": "0.055"
              },
              "iv": {
                "type": "string",
                "description": "option implied volatility for the price (Options only)",
                "example": "70.71"
              },
              "instrument": {
                "type": "string",
                "description": "The name of the instrument",
                "example": "BTC-25AUG17-3900-C"
              },
              "indexPrice": {
                "type": "string",
                "description": "Index price at trade",
                "example": "4101.46"
              },
              "tickDirection": {
                "type": "string",
                "description": "Direction of the \"tick\". 0 = Plus Tick, 1 = Zero-Plus Tick, 2 = Minus Tick, 3 = Zero-Minus Tick",
                "example": "1"
              },
              "tradeSeq": {
                "type": "string",
                "description": "The trade sequence number",
                "example": "1"
              }
            }
          }
        }
      },
      "public_historical_volatility_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "private_account_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "equity",
              "currency",
              "maintenance_margin",
              "initial_margin",
              "available_funds",
              "available_withdrawal_funds",
              "balance",
              "session_upl",
              "session_rpl",
              "total_pl",
              "options_pl",
              "options_session_upl",
              "options_session_rpl",
              "options_delta",
              "options_gamma",
              "options_vega",
              "options_theta",
              "futures_pl",
              "futures_session_upl",
              "futures_session_rpl",
              "session_funding",
              "delta_total",
              "tfa_enabled",
              "system_name",
              "username",
              "email",
              "type",
              "id"
            ],
            "type": "object",
            "properties": {
              "session_rpl": {
                "type": "number",
                "description": "Session realized profit and loss",
                "example": 0.1
              },
              "futures_pl": {
                "type": "number",
                "description": "Futures profit and Loss",
                "example": 0
              },
              "options_vega": {
                "type": "number",
                "description": "Options summary vega",
                "example": 0
              },
              "session_upl": {
                "type": "number",
                "description": "Session unrealized profit and loss",
                "example": 0.846863
              },
              "currency": {
                "type": "string",
                "description": "The selected currency",
                "example": "ETH"
              },
              "portfolio_margining_enabled": {
                "type": "boolean",
                "example": true,
                "description": "`true` when portfolio margining is enabled for user"
              },
              "margin_balance": {
                "type": "number",
                "description": "The account's margin balance",
                "example": 2.25
              },
              "futures_session_upl": {
                "type": "number",
                "description": "Futures session unrealized profit and Loss",
                "example": 0
              },
              "total_pl": {
                "type": "number",
                "description": "Profit and loss",
                "example": 0.02032221
              },
              "projected_maintenance_margin": {
                "type": "number",
                "description": "Projected maintenance margin (for portfolio margining users)",
                "example": 1
              },
              "id": {
                "type": "integer",
                "description": "Account id (available when parameter `extended` = `true`)",
                "example": 12354
              },
              "options_gamma": {
                "type": "number",
                "description": "Options summary gamma",
                "example": 0
              },
              "maintenance_margin": {
                "type": "number",
                "description": "The maintenance margin.",
                "example": 0.1334519
              },
              "available_withdrawal_funds": {
                "type": "number",
                "description": "The account's available to withdrawal funds",
                "example": 2.26
              },
              "initial_margin": {
                "type": "number",
                "description": "The account's initial margin",
                "example": 0.379882
              },
              "session_funding": {
                "type": "number",
                "description": "Session funding",
                "example": 0
              },
              "available_funds": {
                "type": "number",
                "description": "The account's available funds",
                "example": 2.2638913
              },
              "equity": {
                "type": "number",
                "description": "The account's current equity",
                "example": 2.6437733
              },
              "type": {
                "enum": [
                  "main",
                  "subaccount"
                ],
                "type": "string",
                "description": "Account type (available when parameter `extended` = `true`)"
              },
              "email": {
                "type": "string",
                "description": "User email (available when parameter `extended` = `true`)",
                "example": "support@deribit.com"
              },
              "username": {
                "type": "string",
                "description": "Account name (given by user) (available when parameter `extended` = `true`)",
                "example": "name"
              },
              "delta_total": {
                "type": "number",
                "description": "The sum of position deltas",
                "example": 0.1334
              },
              "futures_session_rpl": {
                "type": "number",
                "description": "Futures session realized profit and Loss",
                "example": 0
              },
              "options_theta": {
                "type": "number",
                "description": "Options summary theta",
                "example": 0
              },
              "options_pl": {
                "type": "number",
                "description": "Options profit and Loss",
                "example": 0
              },
              "options_session_rpl": {
                "type": "number",
                "description": "Options session realized profit and Loss",
                "example": 0
              },
              "deposit_address": {
                "type": "string",
                "description": "The deposit address for the account (if available)",
                "example": "14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi"
              },
              "system_name": {
                "type": "string",
                "description": "System generated user nickname (available when parameter `extended` = `true`)",
                "example": "myname"
              },
              "options_session_upl": {
                "type": "number",
                "description": "Options session unrealized profit and Loss",
                "example": 0
              },
              "tfa_enabled": {
                "type": "boolean",
                "description": "Whether two factor authentication is enabled (available when parameter `extended` = `true`)",
                "example": false
              },
              "projected_initial_margin": {
                "type": "number",
                "description": "Projected initial margin (for portfolio margining users)",
                "example": 1
              },
              "balance": {
                "type": "number",
                "description": "The account's balance",
                "example": 3.4906363
              },
              "options_delta": {
                "type": "number",
                "description": "Options summary delta",
                "example": 0
              }
            }
          }
        }
      },
      "address_book_item": {
        "required": [
          "currency",
          "address",
          "creation_timestamp"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "type": {
            "$ref": "#/components/schemas/address_book_type"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          }
        }
      },
      "continuation": {
        "type": "string",
        "description": "Continuation token for pagination.",
        "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
      },
      "last_price": {
        "type": "number",
        "description": "The price for the last trade"
      },
      "transfer_state": {
        "enum": [
          "prepared",
          "confirmed",
          "cancelled",
          "waiting_for_admin",
          "rejection_reason"
        ],
        "type": "string",
        "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin`, `rejection_reason`"
      },
      "currency_with_any": {
        "enum": [
          "BTC",
          "ETH",
          "any"
        ],
        "type": "string",
        "description": "Currency, i.e `\"BTC\"`, `\"ETH\"` or `\"any\"` if don't care"
      },
      "api": {
        "type": "boolean",
        "description": "`true` if created with API"
      },
      "order_state": {
        "enum": [
          "open",
          "filled",
          "rejected",
          "cancelled",
          "untriggered",
          "triggered"
        ],
        "type": "string",
        "description": "order state, `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`"
      },
      "cumulative_amount": {
        "type": "number",
        "description": "The cumulative amount of all orders up till given price",
        "example": 8000
      },
      "best_bid_price": {
        "type": "number",
        "description": "The current best bid price, `null` if there aren't any bids"
      },
      "currency_amount": {
        "type": "number",
        "description": "Amount of funds in given currency",
        "example": 1
      },
      "usd": {
        "type": "number",
        "description": "Option price in USD (Only if `advanced=\"usd\"`)"
      },
      "asks": {
        "items": {
          "type": "string",
          "description": "List of asks"
        },
        "type": "array"
      },
      "trade_seq": {
        "type": "integer",
        "description": "The sequence number of the trade within instrument"
      },
      "trigger": {
        "enum": [
          "index_price",
          "mark_price",
          "last_price"
        ],
        "type": "string",
        "description": "Trigger type (Only for stop orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`."
      },
      "currency_transaction_id": {
        "type": "string",
        "example": "1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572",
        "description": "Transaction id in proper format for currency, `null` if id is not available"
      },
      "index_price": {
        "type": "number",
        "description": "Current index price"
      },
      "min_price": {
        "type": "number",
        "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum."
      },
      "instrument_name": {
        "type": "string",
        "description": "Unique instrument identifier",
        "example": "BTC-PERPETUAL"
      },
      "result_count": {
        "type": "integer",
        "description": "Total number of results available",
        "example": 101
      },
      "simple_order_type": {
        "enum": [
          "all",
          "limit",
          "stop"
        ],
        "type": "string",
        "description": "Order type, `\"all\"`, `\"limit\"`, `\"stop\"`"
      },
      "best_bid_amount": {
        "type": "number",
        "description": "It represents the requested order size of all best bids"
      },
      "currency_address": {
        "type": "string",
        "description": "Address in proper format for currency",
        "example": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
      },
      "address_book_type": {
        "enum": [
          "transfer",
          "withdrawal"
        ],
        "type": "string",
        "description": "Address book type"
      },
      "underlying_index": {
        "type": "number",
        "description": "Name of the underlying future, or `index_price` (options only)"
      },
      "timestamp": {
        "type": "integer",
        "example": 1536569522277,
        "description": "The timestamp (seconds since the Unix epoch, with millisecond precision)"
      },
      "trade_id": {
        "type": "string",
        "description": "Unique (per currency) trade identifier"
      },
      "kind_with_any": {
        "enum": [
          "future",
          "option",
          "any"
        ],
        "type": "string",
        "description": "Instrument kind, `\"future\"` or `\"option\"` or `\"any\"` if don't care"
      },
      "deposit_state": {
        "enum": [
          "pending",
          "completed",
          "rejected",
          "replaced"
        ],
        "type": "string",
        "description": "Deposit state, allowed values : `pending`, `completed`, `rejected`, `replaced`"
      },
      "advanced": {
        "enum": [
          "usd",
          "implv"
        ],
        "type": "string",
        "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).\n"
      },
      "bid_iv": {
        "type": "number",
        "description": "(Only for option) implied volatility for best bid"
      },
      "order_state_in_user_trade": {
        "enum": [
          "open",
          "filled",
          "rejected",
          "cancelled",
          "untriggered",
          "archive"
        ],
        "type": "string",
        "description": "order state, `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)"
      },
      "kind": {
        "enum": [
          "future",
          "option"
        ],
        "type": "string",
        "description": "Instrument kind, `\"future\"` or `\"option\"`"
      },
      "sorting": {
        "enum": [
          "asc",
          "desc",
          "default"
        ],
        "type": "string"
      },
      "average_price": {
        "type": "number",
        "description": "Average fill price of the order"
      },
      "profit_loss": {
        "type": "number",
        "description": "Profit and loss in base currency."
      },
      "bids": {
        "items": {
          "type": "string",
          "description": "List of bids"
        },
        "type": "array"
      },
      "filled_amount": {
        "type": "number",
        "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH."
      },
      "best_ask_price": {
        "type": "number",
        "description": "The current best ask price, `null` if there aren't any asks"
      },
      "transfer_direction": {
        "enum": [
          "payment",
          "income"
        ],
        "type": "string",
        "description": "Transfer direction"
      },
      "filled_quantity": {
        "type": "number",
        "description": "The number of contracts to be traded."
      },
      "transfer_id": {
        "type": "integer",
        "description": "Id of transfer",
        "example": 12
      },
      "ask_iv": {
        "type": "number",
        "description": "(Only for option) implied volatility for best ask"
      },
      "withdrawal_state": {
        "enum": [
          "unconfirmed",
          "confirmed",
          "cancelled",
          "completed",
          "interrupted",
          "rejected"
        ],
        "type": "string",
        "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`"
      },
      "settlement_price": {
        "type": "number",
        "description": "The settlement price for the instrument. Only when `state = open`"
      },
      "timestamp_for_book_notifications": {
        "type": "integer",
        "example": 1536569522277,
        "description": "The timestamp of last change (seconds since the Unix epoch, with millisecond precision)"
      },
      "best_ask_amount": {
        "type": "number",
        "description": "It represents the requested order size of all best asks"
      },
      "direction": {
        "enum": [
          "buy",
          "sell"
        ],
        "type": "string",
        "description": "direction, `buy` or `sell`"
      },
      "delivery_price": {
        "type": "number",
        "description": "The settlement price for the instrument. Only when `state = closed`"
      },
      "currency": {
        "enum": [
          "BTC",
          "ETH"
        ],
        "type": "string",
        "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`"
      },
      "time_in_force": {
        "enum": [
          "good_til_cancelled",
          "fill_or_kill",
          "immediate_or_cancel"
        ],
        "type": "string",
        "description": "Order time in force: `\"good_til_cancelled\"`, `\"fill_or_kill\"`, `\"immediate_or_cancel\"`"
      },
      "reduce_only": {
        "type": "boolean",
        "description": "`true` for reduce-only orders only"
      },
      "open_interest": {
        "type": "number",
        "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH."
      },
      "implv": {
        "type": "number",
        "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)"
      },
      "cumulative_quantity": {
        "type": "number",
        "description": "The cumulative quantity",
        "example": 800
      },
      "mark_price": {
        "type": "number",
        "description": "The mark price for the instrument"
      },
      "stats": {
        "required": [
          "volume",
          "high",
          "low"
        ],
        "type": "object",
        "properties": {
          "volume": {
            "type": "number",
            "description": "volume during last 24h in base currency"
          },
          "high": {
            "type": "number",
            "description": "highest price during 24h"
          },
          "low": {
            "type": "number",
            "description": "lowest price during 24h"
          }
        }
      },
      "order_type": {
        "enum": [
          "market",
          "limit",
          "stop_market",
          "stop_limit"
        ],
        "type": "string",
        "description": "order type, `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`"
      },
      "mark_iv": {
        "type": "number",
        "description": "(Only for option) implied volatility for mark price"
      },
      "greeks": {
        "required": [
          "delta",
          "gamma",
          "rho",
          "theta",
          "vega"
        ],
        "type": "object",
        "description": "Only for options",
        "properties": {
          "theta": {
            "type": "number",
            "description": "(Only for option) The theta value for the option"
          },
          "vega": {
            "type": "number",
            "description": "(Only for option) The vega value for the option"
          },
          "gamma": {
            "type": "number",
            "description": "(Only for option) The gamma value for the option"
          },
          "rho": {
            "type": "number",
            "description": "(Only for option) The rho value for the option"
          },
          "delta": {
            "type": "number",
            "description": "(Only for option) The delta value for the option"
          }
        }
      },
      "max_show": {
        "type": "number",
        "description": "Maximum amount within an order to be shown to other traders, 0 for invisible order."
      },
      "label": {
        "type": "string",
        "description": "user defined label (up to 32 characters)"
      },
      "wallet_address_type": {
        "enum": [
          "deposit",
          "withdrawal",
          "transfer"
        ],
        "type": "string",
        "description": "Address type/purpose, allowed values : `deposit`, `withdrawal`, `transfer`"
      },
      "matching_id": {
        "example": "100234",
        "type": "string",
        "description": "Matching (taker) order id, `null` if it is not users order"
      },
      "transfer_type": {
        "enum": [
          "user",
          "subaccount"
        ],
        "type": "string",
        "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount"
      },
      "current_funding": {
        "type": "number",
        "description": "Current funding (perpetual only)"
      },
      "triggered": {
        "type": "boolean",
        "description": "Whether the stop order has been triggered (Only for stop orders)"
      },
      "contract_size": {
        "type": "number",
        "description": "Contract size, for futures in USD, for options in BTC.",
        "example": 10
      },
      "order_id": {
        "type": "string",
        "description": "Unique order identifier",
        "example": "ETH-100234"
      },
      "price": {
        "type": "number",
        "description": "Price in base currency"
      },
      "settlement_type": {
        "enum": [
          "settlement",
          "delivery",
          "bankruptcy"
        ],
        "type": "string",
        "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`."
      },
      "transfer_other_side": {
        "type": "string",
        "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
        "example": "Smith"
      },
      "stop_price": {
        "type": "number",
        "description": "stop price (Only for future stop orders)"
      },
      "post_only": {
        "type": "boolean",
        "description": "`true` for post-only orders only"
      },
      "tick_direction": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick)."
      },
      "fee": {
        "type": "number",
        "example": 2.3e-05,
        "description": "Fee in currency"
      },
      "book_state": {
        "enum": [
          "open",
          "closed"
        ],
        "type": "string",
        "description": "The state of the order book. Possible values are `open` and `closed`."
      },
      "funding_8h": {
        "type": "number",
        "description": "Funding 8h (perpetual only)"
      },
      "commission": {
        "type": "number",
        "description": "Commission paid so far (in base currency)"
      },
      "max_price": {
        "type": "number",
        "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum."
      },
      "amount": {
        "type": "number",
        "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH."
      },
      "underlying_price": {
        "type": "number",
        "description": "Underlying price for implied volatility calculations (options only)"
      },
      "order_type2": {
        "enum": [
          "all",
          "limit",
          "stop_all",
          "stop_limit",
          "stop_market"
        ],
        "type": "string",
        "description": "Order type, `\"all\"`, `\"limit\"`, `\"stop_all\"`, `\"stop_limit\"` or `\"stop_market\"`"
      },
      "implied_volatility": {
        "type": "number",
        "description": "Value of the volatility of the underlying instrument"
      },
      "interest_rate": {
        "type": "number",
        "description": "Interest rate used in implied volatility calculations (options only)"
      },
      "quantity": {
        "type": "number",
        "description": "The number of contracts to be traded."
      },
      "public_test_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "version"
            ],
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "description": "The API version",
                "example": "2.1.26"
              }
            }
          }
        }
      },
      "key_number_pair": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "private_remove_from_address_book_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "deribit_price_ranking_notification": {
        "items": {
          "properties": {
            "timestamp": {
              "type": "integer",
              "description": "The timestamp of the last update from stock exchange",
              "example": 1536569522277
            },
            "price": {
              "type": "number",
              "description": "Stock exchange index price"
            },
            "identifier": {
              "type": "string",
              "description": "Stock exchange identifier",
              "example": "bitstamp"
            },
            "enabled": {
              "type": "boolean",
              "description": "Stock exchange status"
            },
            "weight": {
              "type": "number",
              "description": "The weight of the ranking given in percent"
            }
          }
        },
        "type": "array"
      },
      "public_ticker_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ticker_notification"
          }
        }
      },
      "quote_notification": {
        "required": [
          "timestamp",
          "instrument_name",
          "best_bid_amount",
          "best_bid_price",
          "best_ask_amount",
          "best_ask_price"
        ],
        "properties": {
          "best_bid_amount": {
            "$ref": "#/components/schemas/best_bid_amount"
          },
          "best_ask_price": {
            "$ref": "#/components/schemas/best_ask_price"
          },
          "best_ask_amount": {
            "$ref": "#/components/schemas/best_ask_amount"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "best_bid_price": {
            "$ref": "#/components/schemas/best_bid_price"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          }
        }
      },
      "public_trades_history_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "trades",
              "has_more"
            ],
            "type": "object",
            "properties": {
              "has_more": {
                "type": "boolean"
              },
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/public_trade"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "settlement_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "continuation",
              "settlements"
            ],
            "properties": {
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "settlements": {
                "items": {
                  "$ref": "#/components/schemas/settlement"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "private_edit_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "order",
              "trades"
            ],
            "type": "object",
            "properties": {
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              },
              "order": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        }
      },
      "user_trades_history_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "trades",
              "has_more"
            ],
            "type": "object",
            "properties": {
              "has_more": {
                "type": "boolean"
              },
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "public_get_funding_chart_data_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "required": [
              "current_interest",
              "data",
              "index_price",
              "interest_8h",
              "max"
            ],
            "type": "object",
            "properties": {
              "index_price": {
                "type": "number",
                "description": "Current index price",
                "example": 1234.23
              },
              "max": {
                "type": "number",
                "description": "maximal interest",
                "example": 0.005
              },
              "current_interest": {
                "type": "number",
                "description": "Current interest",
                "example": 0.005000670552845
              },
              "interest_8h": {
                "type": "number",
                "description": "Current interest 8h",
                "example": 0.0040080896931
              },
              "data": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "deposit": {
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "received_timestamp",
          "updated_timestamp"
        ],
        "type": "object",
        "properties": {
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "state": {
            "$ref": "#/components/schemas/deposit_state"
          },
          "received_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/currency_transaction_id"
          }
        }
      },
      "private_get_position_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/position"
          }
        }
      },
      "position": {
        "required": [
          "instrument_name",
          "kind",
          "average_price",
          "direction",
          "mark_price",
          "delta",
          "index_price",
          "initial_margin",
          "maintenance_margin",
          "open_orders_margin",
          "settlement_price",
          "total_profit_loss",
          "floating_profit_loss",
          "realized_profit_loss",
          "size"
        ],
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "average_price_usd": {
            "type": "number",
            "description": "Only for options, average price in USD"
          },
          "estimated_liquidation_price": {
            "type": "number",
            "description": "Only for futures, estimated liquidation price"
          },
          "floating_profit_loss": {
            "type": "number",
            "description": "Floating profit or loss"
          },
          "floating_profit_loss_usd": {
            "type": "number",
            "description": "Only for options, floating profit or loss in USD"
          },
          "open_orders_margin": {
            "type": "number",
            "description": "Open orders margin"
          },
          "total_profit_loss": {
            "type": "number",
            "description": "Profit or loss from position"
          },
          "realized_profit_loss": {
            "type": "number",
            "description": "Realized profit or loss"
          },
          "delta": {
            "type": "number",
            "description": "Delta parameter"
          },
          "initial_margin": {
            "type": "number",
            "description": "Initial margin"
          },
          "size": {
            "type": "number",
            "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)"
          },
          "maintenance_margin": {
            "type": "number",
            "description": "Maintenance margin"
          },
          "kind": {
            "$ref": "#/components/schemas/kind"
          },
          "mark_price": {
            "type": "number",
            "description": "Current mark price for position's instrument"
          },
          "average_price": {
            "type": "number",
            "description": "Average price of trades that built this position"
          },
          "settlement_price": {
            "type": "number",
            "description": "Last settlement price for position's instrument 0 if instrument wasn't settled yet"
          },
          "index_price": {
            "type": "number",
            "description": "Current index price"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "size_currency": {
            "type": "number",
            "description": "Only for futures, position size in base currency"
          }
        }
      },
      "private_address_book_response": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/address_book_item"
            },
            "type": "array"
          }
        }
      },
      "user_trade": {
        "required": [
          "trade_id",
          "trade_seq",
          "instrument_name",
          "timestamp",
          "order_id",
          "matching_id",
          "self_trade",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount",
          "fee",
          "fee_currency",
          "state"
        ],
        "properties": {
          "direction": {
            "description": "Trade direction of the taker",
            "$ref": "#/components/schemas/direction"
          },
          "fee_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "order_id": {
            "type": "string",
            "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade"
          },
          "timestamp": {
            "type": "integer",
            "description": "The timestamp of the trade",
            "example": 1517329113791
          },
          "price": {
            "description": "The price of the trade",
            "$ref": "#/components/schemas/price"
          },
          "iv": {
            "type": "number",
            "description": "Option implied volatility for the price (Option only)"
          },
          "trade_id": {
            "$ref": "#/components/schemas/trade_id"
          },
          "fee": {
            "type": "number",
            "description": "User's fee in units of the specified `fee_currency`"
          },
          "order_type": {
            "enum": [
              "limit",
              "market",
              "liquidation"
            ],
            "type": "string",
            "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/trade_seq"
          },
          "self_trade": {
            "type": "boolean",
            "description": "`true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that"
          },
          "state": {
            "$ref": "#/components/schemas/order_state_in_user_trade"
          },
          "label": {
            "type": "string",
            "description": "User defined label (presented only when previously set for order by user)"
          },
          "index_price": {
            "type": "number",
            "description": "Index Price at the moment of trade"
          },
          "amount": {
            "type": "number",
            "description": "Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH."
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/tick_direction"
          },
          "matching_id": {
            "type": "string",
            "description": "Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)"
          },
          "liquidity": {
            "enum": [
              "M",
              "T"
            ],
            "type": "string",
            "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order"
          }
        }
      },
      "order": {
        "required": [
          "order_id",
          "order_state",
          "order_type",
          "time_in_force",
          "is_liquidation",
          "instrument_name",
          "creation_timestamp",
          "last_update_timestamp",
          "direction",
          "price",
          "label",
          "post_only",
          "api",
          "max_show"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "reduce_only": {
            "$ref": "#/components/schemas/reduce_only"
          },
          "triggered": {
            "$ref": "#/components/schemas/triggered"
          },
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "time_in_force": {
            "$ref": "#/components/schemas/time_in_force"
          },
          "api": {
            "$ref": "#/components/schemas/api"
          },
          "order_state": {
            "$ref": "#/components/schemas/order_state"
          },
          "implv": {
            "$ref": "#/components/schemas/implv"
          },
          "advanced": {
            "$ref": "#/components/schemas/advanced"
          },
          "post_only": {
            "$ref": "#/components/schemas/post_only"
          },
          "usd": {
            "$ref": "#/components/schemas/usd"
          },
          "stop_price": {
            "$ref": "#/components/schemas/stop_price"
          },
          "order_type": {
            "$ref": "#/components/schemas/order_type"
          },
          "last_update_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "max_show": {
            "$ref": "#/components/schemas/max_show"
          },
          "profit_loss": {
            "$ref": "#/components/schemas/profit_loss"
          },
          "is_liquidation": {
            "type": "boolean",
            "description": "`true` if order was automatically created during liquidation"
          },
          "filled_amount": {
            "$ref": "#/components/schemas/filled_amount"
          },
          "label": {
            "$ref": "#/components/schemas/label"
          },
          "commission": {
            "$ref": "#/components/schemas/commission"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "trigger": {
            "$ref": "#/components/schemas/trigger"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "average_price": {
            "$ref": "#/components/schemas/average_price"
          }
        }
      }
    },
    "parameters": {
      "client_software_version": {
        "required": true,
        "description": "Client software version",
        "in": "query",
        "name": "client_version",
        "schema": {
          "type": "string",
          "example": "1.0.2"
        }
      },
      "optional_price": {
        "required": false,
        "description": "Optional price for limit order.",
        "in": "query",
        "name": "price",
        "schema": {
          "type": "number"
        }
      },
      "optional_currency": {
        "required": false,
        "in": "query",
        "description": "The currency symbol",
        "name": "currency",
        "schema": {
          "$ref": "#/components/schemas/currency"
        }
      },
      "continuation": {
        "description": "Continuation token for pagination",
        "required": false,
        "in": "query",
        "name": "continuation",
        "schema": {
          "type": "string",
          "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
        }
      },
      "optional_start_seq": {
        "description": "The sequence number of the first trade to be returned",
        "required": false,
        "in": "query",
        "name": "start_seq",
        "schema": {
          "type": "integer"
        }
      },
      "index_name": {
        "description": "Index identifier, matches (base) cryptocurrency with quote currency",
        "required": true,
        "in": "query",
        "name": "index_name",
        "schema": {
          "enum": [
            "btc_usd",
            "eth_usd"
          ],
          "type": "string"
        }
      },
      "optional_offset": {
        "description": "The offset for pagination, default - `0`",
        "required": false,
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "integer",
          "example": 10
        }
      },
      "currency": {
        "description": "The currency symbol",
        "required": true,
        "in": "query",
        "name": "currency",
        "schema": {
          "$ref": "#/components/schemas/currency"
        }
      },
      "currency_with_any": {
        "description": "The currency symbol or `\"any\"` for all",
        "required": true,
        "in": "query",
        "name": "currency",
        "schema": {
          "$ref": "#/components/schemas/currency_with_any"
        }
      },
      "optional_count10": {
        "description": "Number of requested items, default - `10`",
        "required": false,
        "in": "query",
        "name": "count",
        "schema": {
          "type": "integer"
        }
      },
      "transfer_currency_amount": {
        "required": true,
        "description": "Amount of funds to be transferred",
        "in": "query",
        "name": "amount",
        "schema": {
          "type": "number"
        }
      },
      "optional_settlement_type": {
        "required": false,
        "in": "query",
        "description": "Settlement type",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/settlement_type"
        }
      },
      "client_software_name": {
        "required": true,
        "description": "Client software name",
        "in": "query",
        "name": "client_name",
        "schema": {
          "type": "string",
          "example": "My Trading Software"
        }
      },
      "end_timestamp": {
        "description": "The most recent timestamp to return result for",
        "required": true,
        "in": "query",
        "name": "end_timestamp",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_start_trade_id": {
        "description": "The ID number of the first trade to be returned",
        "required": false,
        "in": "query",
        "name": "start_id",
        "schema": {
          "$ref": "#/components/schemas/trade_id"
        }
      },
      "boolean_state": {
        "required": true,
        "in": "query",
        "name": "state",
        "schema": {
          "type": "boolean"
        }
      },
      "order_label": {
        "required": false,
        "description": "user defined label for the order (maximum 32 characters)",
        "in": "query",
        "name": "label",
        "schema": {
          "type": "string"
        }
      },
      "order_type": {
        "required": false,
        "description": "The order type, default: `\"limit\"`",
        "in": "query",
        "name": "type",
        "schema": {
          "enum": [
            "limit",
            "stop_limit",
            "market",
            "stop_market"
          ],
          "type": "string"
        }
      },
      "edit_advanced_order_type": {
        "required": false,
        "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
        "in": "query",
        "name": "advanced",
        "schema": {
          "$ref": "#/components/schemas/advanced"
        }
      },
      "max_show": {
        "required": false,
        "description": "Maximum amount within an order to be shown to other customers, `0` for invisible order",
        "in": "query",
        "name": "max_show",
        "schema": {
          "default": 1,
          "type": "number"
        }
      },
      "transfer_destination_for_subaccount": {
        "required": true,
        "description": "Id of destination subaccount",
        "in": "query",
        "name": "destination",
        "schema": {
          "type": "integer",
          "example": 1
        }
      },
      "optional_settlement_start_timestamp": {
        "required": false,
        "in": "query",
        "description": "The latest timestamp to return result for",
        "name": "search_start_timestamp",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_end_seq": {
        "description": "The sequence number of the last trade to be returned",
        "required": false,
        "in": "query",
        "name": "end_seq",
        "schema": {
          "type": "integer"
        }
      },
      "optional_include_old_trades": {
        "description": "Include trades older than 7 days, default - `false`",
        "required": false,
        "in": "query",
        "name": "include_old",
        "schema": {
          "type": "boolean"
        }
      },
      "optional_end_trade_id": {
        "description": "The ID number of the last trade to be returned",
        "required": false,
        "in": "query",
        "name": "end_id",
        "schema": {
          "$ref": "#/components/schemas/trade_id"
        }
      },
      "trigger": {
        "required": false,
        "description": "Defines trigger type, required for `\"stop_limit\"` order type",
        "in": "query",
        "name": "trigger",
        "schema": {
          "$ref": "#/components/schemas/trigger"
        }
      },
      "instrument_name": {
        "description": "Instrument name",
        "required": true,
        "in": "query",
        "name": "instrument_name",
        "schema": {
          "$ref": "#/components/schemas/instrument_name"
        }
      },
      "advanced_order_type": {
        "required": false,
        "description": "Advanced option order type. (Only for options)",
        "in": "query",
        "name": "advanced",
        "schema": {
          "$ref": "#/components/schemas/advanced"
        }
      },
      "order_quantity": {
        "required": true,
        "description": "It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH",
        "in": "query",
        "name": "amount",
        "schema": {
          "type": "number"
        }
      },
      "length_for_perpetual_chart": {
        "required": false,
        "description": "Specifies time period. `8h` - 8 hours, `24h` - 24 hours",
        "in": "query",
        "name": "length",
        "schema": {
          "enum": [
            "8h",
            "24h"
          ],
          "type": "string"
        }
      },
      "optional_instrument_name": {
        "description": "Instrument name",
        "required": false,
        "in": "query",
        "name": "instrument_name",
        "schema": {
          "$ref": "#/components/schemas/instrument_name"
        }
      },
      "optional_order_type": {
        "description": "Order type, default - `all`",
        "required": false,
        "in": "query",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/order_type2"
        }
      },
      "optional_kind": {
        "description": "Instrument kind, if not provided instruments of all kinds are considered",
        "required": false,
        "in": "query",
        "name": "kind",
        "schema": {
          "$ref": "#/components/schemas/kind"
        }
      },
      "reduce_only": {
        "required": false,
        "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
        "in": "query",
        "name": "reduce_only",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "address_name": {
        "required": true,
        "description": "Name of address book entry",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string",
          "example": "Main address"
        }
      },
      "address_book_type": {
        "required": true,
        "description": "Address book type",
        "in": "query",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/address_book_type"
        }
      },
      "order_id": {
        "required": true,
        "in": "query",
        "description": "The order id",
        "name": "order_id",
        "schema": {
          "$ref": "#/components/schemas/order_id"
        }
      },
      "tfa": {
        "required": false,
        "description": "TFA code, required when TFA is enabled for current account",
        "in": "query",
        "name": "tfa",
        "schema": {
          "type": "string"
        }
      },
      "start_timestamp": {
        "description": "The earliest timestamp to return result for",
        "required": true,
        "in": "query",
        "name": "start_timestamp",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "subscription_interval": {
        "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied",
        "required": true,
        "in": "query",
        "name": "interval",
        "schema": {
          "enum": [
            "100ms",
            "raw"
          ],
          "type": "string"
        }
      },
      "kind_with_any": {
        "description": "Instrument kind or `\"any\"` for all",
        "required": true,
        "in": "query",
        "name": "kind",
        "schema": {
          "$ref": "#/components/schemas/kind_with_any"
        }
      },
      "optional_count20": {
        "description": "Number of requested items, default - `20`",
        "required": false,
        "in": "query",
        "name": "count",
        "schema": {
          "type": "integer"
        }
      },
      "optional_sorting": {
        "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
        "required": false,
        "in": "query",
        "name": "sorting",
        "schema": {
          "$ref": "#/components/schemas/sorting"
        }
      },
      "stop_price": {
        "required": false,
        "description": "Stop price, required for stop limit orders (Only for stop orders)",
        "in": "query",
        "name": "stop_price",
        "schema": {
          "type": "number"
        }
      },
      "withdrawal_id": {
        "required": true,
        "in": "query",
        "description": "The withdrawal id",
        "name": "id",
        "schema": {
          "type": "number",
          "example": 1
        }
      },
      "edit_order_price": {
        "required": true,
        "description": "<p>The order price in base currency.</p> <p>When editing an option order with advanced=usd, the field price should be the option price value in USD.</p> <p>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p>",
        "in": "query",
        "name": "price",
        "schema": {
          "type": "number"
        }
      },
      "order_price": {
        "required": false,
        "description": "<p>The order price in base currency (Only for limit and stop_limit orders)</p> <p>When adding order with advanced=usd, the field price should be the option price value in USD.</p> <p>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p>",
        "in": "query",
        "name": "price",
        "schema": {
          "type": "number"
        }
      },
      "optional_include_unfilled_orders": {
        "description": "Include in result fully unfilled closed orders, default - `false`",
        "required": false,
        "in": "query",
        "name": "include_unfilled",
        "schema": {
          "type": "boolean",
          "example": false
        }
      },
      "post_only": {
        "required": false,
        "description": "<p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.</p> <p>Only valid in combination with time_in_force=`\"good_til_cancelled\"`</p>",
        "in": "query",
        "name": "post_only",
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "currency_address_from_address_book": {
        "required": true,
        "description": "Address in currency format, it must be in address book",
        "in": "query",
        "name": "address",
        "schema": {
          "type": "string"
        }
      },
      "transfer_destination_for_user": {
        "required": true,
        "description": "Destination address from address book",
        "in": "query",
        "name": "destination",
        "schema": {
          "type": "string"
        }
      },
      "time_in_force": {
        "required": false,
        "description": "<p>Specifies how long the order remains in effect. Default `\"good_til_cancelled\"`</p> <ul> <li>`\"good_til_cancelled\"` - unfilled order remains in order book until cancelled</li> <li>`\"fill_or_kill\"` - execute a transaction immediately and completely or not at all</li> <li>`\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</li> </ul>",
        "in": "query",
        "name": "time_in_force",
        "schema": {
          "default": "good_til_cancelled",
          "enum": [
            "good_til_cancelled",
            "fill_or_kill",
            "immediate_or_cancel"
          ],
          "type": "string"
        }
      },
      "withdrawal_priority": {
        "required": false,
        "description": "Withdrawal priority, optional for BTC, default: `high`",
        "in": "query",
        "name": "priority",
        "schema": {
          "enum": [
            "insane",
            "extreme_high",
            "very_high",
            "high",
            "mid",
            "low",
            "very_low"
          ],
          "type": "string"
        }
      },
      "transfer_direction": {
        "required": true,
        "description": "Direction of transfer",
        "in": "query",
        "name": "direction",
        "schema": {
          "$ref": "#/components/schemas/transfer_direction"
        }
      },
      "transfer_id": {
        "required": true,
        "description": "Id of transfer",
        "in": "query",
        "name": "id",
        "schema": {
          "$ref": "#/components/schemas/transfer_id"
        }
      },
      "optional_simple_order_type": {
        "description": "Order type - limit, stop or all, default - `all`",
        "required": false,
        "in": "query",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/simple_order_type"
        }
      },
      "optional_include_old_orders": {
        "description": "Include in result orders older than 2 days, default - `false`",
        "required": false,
        "in": "query",
        "name": "include_old",
        "schema": {
          "type": "boolean",
          "example": false
        }
      },
      "simple_order_type_market_limit": {
        "required": true,
        "description": "The order type",
        "in": "query",
        "name": "type",
        "schema": {
          "enum": [
            "limit",
            "market"
          ],
          "type": "string"
        }
      },
      "withdrawal_currency_amount": {
        "required": true,
        "description": "Amount of funds to be withdrawn",
        "in": "query",
        "name": "amount",
        "schema": {
          "type": "number"
        }
      }
    }
  },
  "tags": [
    {
      "name": "v1",
      "description": "API V1 request"
    },
    {
      "name": "websocket_only",
      "description": "Can only be used over websockets."
    },
    {
      "name": "public",
      "description": "Public methods can be used without authentication."
    },
    {
      "name": "private",
      "description": "<p>Private methods require authentication. All requests must include a valid OAuth2 token.</p>\n<p>A token can be requested using the <a href=\"#public-auth\">/public/auth</a> method.</p>\n<p>When using the websockets protocol, the token must be included as a parameter <code>access_token</code> in the message. When using REST (HTTP GET), the token may also be passed in the <code>Authorization</code> header.</p>"
    },
    {
      "name": "internal",
      "description": "Not intended for public use; do not include in publicly available documentation."
    },
    {
      "name": "authentication"
    },
    {
      "name": "session_management"
    },
    {
      "name": "subscription_management",
      "description": "Subscription works as [notifications](#notifications), so users will automatically (after subscribing) receive messages from the server. Overview for each channel response format is described in [subscriptions](#subscriptions) section."
    },
    {
      "name": "account_management"
    },
    {
      "name": "trading"
    },
    {
      "name": "market_data"
    },
    {
      "name": "wallet"
    }
  ],
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://localhost:8082/api/v2",
      "description": "local test server"
    },
    {
      "url": "https://test.deribit.com/api/v2"
    }
  ]
}
