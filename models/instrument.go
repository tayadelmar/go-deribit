// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instrument instrument
// swagger:model instrument
type Instrument struct {

	// The underlying currency being traded.
	// Required: true
	// Enum: [BTC ETH]
	BaseCurrency *string `json:"base_currency"`

	// Contract size for instrument
	// Required: true
	ContractSize *float64 `json:"contract_size"`

	// The time when the instrument was first created (milliseconds)
	// Required: true
	CreationTimestamp *int64 `json:"creation_timestamp"`

	// The time when the instrument will expire (milliseconds)
	// Required: true
	ExpirationTimestamp *int64 `json:"expiration_timestamp"`

	// instrument name
	// Required: true
	InstrumentName InstrumentName `json:"instrument_name"`

	// Indicates if the instrument can currently be traded.
	// Required: true
	IsActive *bool `json:"is_active"`

	// kind
	// Required: true
	Kind Kind `json:"kind"`

	// Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.
	// Required: true
	MinTradeAmount *float64 `json:"min_trade_amount"`

	// The option type (only for options)
	// Enum: [call put]
	OptionType string `json:"option_type,omitempty"`

	// The currency in which the instrument prices are quoted.
	// Required: true
	// Enum: [USD]
	QuoteCurrency *string `json:"quote_currency"`

	// The settlement period.
	// Required: true
	// Enum: [month week perpetual]
	SettlementPeriod *string `json:"settlement_period"`

	// The strike value. (only for options)
	Strike float64 `json:"strike,omitempty"`

	// specifies minimal price change and, as follows, the number of decimal places for instrument prices
	// Required: true
	TickSize *float64 `json:"tick_size"`
}

// Validate validates this instrument
func (m *Instrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinTradeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTickSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var instrumentTypeBaseCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BTC","ETH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instrumentTypeBaseCurrencyPropEnum = append(instrumentTypeBaseCurrencyPropEnum, v)
	}
}

const (

	// InstrumentBaseCurrencyBTC captures enum value "BTC"
	InstrumentBaseCurrencyBTC string = "BTC"

	// InstrumentBaseCurrencyETH captures enum value "ETH"
	InstrumentBaseCurrencyETH string = "ETH"
)

// prop value enum
func (m *Instrument) validateBaseCurrencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instrumentTypeBaseCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Instrument) validateBaseCurrency(formats strfmt.Registry) error {

	if err := validate.Required("base_currency", "body", m.BaseCurrency); err != nil {
		return err
	}

	// value enum
	if err := m.validateBaseCurrencyEnum("base_currency", "body", *m.BaseCurrency); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateContractSize(formats strfmt.Registry) error {

	if err := validate.Required("contract_size", "body", m.ContractSize); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("creation_timestamp", "body", m.CreationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateInstrumentName(formats strfmt.Registry) error {

	if err := m.InstrumentName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instrument_name")
		}
		return err
	}

	return nil
}

func (m *Instrument) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateKind(formats strfmt.Registry) error {

	if err := m.Kind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("kind")
		}
		return err
	}

	return nil
}

func (m *Instrument) validateMinTradeAmount(formats strfmt.Registry) error {

	if err := validate.Required("min_trade_amount", "body", m.MinTradeAmount); err != nil {
		return err
	}

	return nil
}

var instrumentTypeOptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["call","put"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instrumentTypeOptionTypePropEnum = append(instrumentTypeOptionTypePropEnum, v)
	}
}

const (

	// InstrumentOptionTypeCall captures enum value "call"
	InstrumentOptionTypeCall string = "call"

	// InstrumentOptionTypePut captures enum value "put"
	InstrumentOptionTypePut string = "put"
)

// prop value enum
func (m *Instrument) validateOptionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instrumentTypeOptionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Instrument) validateOptionType(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptionTypeEnum("option_type", "body", m.OptionType); err != nil {
		return err
	}

	return nil
}

var instrumentTypeQuoteCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instrumentTypeQuoteCurrencyPropEnum = append(instrumentTypeQuoteCurrencyPropEnum, v)
	}
}

const (

	// InstrumentQuoteCurrencyUSD captures enum value "USD"
	InstrumentQuoteCurrencyUSD string = "USD"
)

// prop value enum
func (m *Instrument) validateQuoteCurrencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instrumentTypeQuoteCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Instrument) validateQuoteCurrency(formats strfmt.Registry) error {

	if err := validate.Required("quote_currency", "body", m.QuoteCurrency); err != nil {
		return err
	}

	// value enum
	if err := m.validateQuoteCurrencyEnum("quote_currency", "body", *m.QuoteCurrency); err != nil {
		return err
	}

	return nil
}

var instrumentTypeSettlementPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["month","week","perpetual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instrumentTypeSettlementPeriodPropEnum = append(instrumentTypeSettlementPeriodPropEnum, v)
	}
}

const (

	// InstrumentSettlementPeriodMonth captures enum value "month"
	InstrumentSettlementPeriodMonth string = "month"

	// InstrumentSettlementPeriodWeek captures enum value "week"
	InstrumentSettlementPeriodWeek string = "week"

	// InstrumentSettlementPeriodPerpetual captures enum value "perpetual"
	InstrumentSettlementPeriodPerpetual string = "perpetual"
)

// prop value enum
func (m *Instrument) validateSettlementPeriodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instrumentTypeSettlementPeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Instrument) validateSettlementPeriod(formats strfmt.Registry) error {

	if err := validate.Required("settlement_period", "body", m.SettlementPeriod); err != nil {
		return err
	}

	// value enum
	if err := m.validateSettlementPeriodEnum("settlement_period", "body", *m.SettlementPeriod); err != nil {
		return err
	}

	return nil
}

func (m *Instrument) validateTickSize(formats strfmt.Registry) error {

	if err := validate.Required("tick_size", "body", m.TickSize); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instrument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instrument) UnmarshalBinary(b []byte) error {
	var res Instrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
